"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/map/page",{

/***/ "(app-pages-browser)/./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n// do not edit .js files directly - edit src/index.jst\nmodule.exports = function equal(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;\n            return true;\n        }\n        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            var key = keys[i];\n            if (!equal(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    return a !== a && b !== b;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxzREFBc0Q7QUFJdERBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxNQUFNQyxDQUFDLEVBQUVDLENBQUM7SUFDbEMsSUFBSUQsTUFBTUMsR0FBRyxPQUFPO0lBRXBCLElBQUlELEtBQUtDLEtBQUssT0FBT0QsS0FBSyxZQUFZLE9BQU9DLEtBQUssVUFBVTtRQUMxRCxJQUFJRCxFQUFFRSxXQUFXLEtBQUtELEVBQUVDLFdBQVcsRUFBRSxPQUFPO1FBRTVDLElBQUlDLFFBQVFDLEdBQUdDO1FBQ2YsSUFBSUMsTUFBTUMsT0FBTyxDQUFDUCxJQUFJO1lBQ3BCRyxTQUFTSCxFQUFFRyxNQUFNO1lBQ2pCLElBQUlBLFVBQVVGLEVBQUVFLE1BQU0sRUFBRSxPQUFPO1lBQy9CLElBQUtDLElBQUlELFFBQVFDLFFBQVEsR0FDdkIsSUFBSSxDQUFDTCxNQUFNQyxDQUFDLENBQUNJLEVBQUUsRUFBRUgsQ0FBQyxDQUFDRyxFQUFFLEdBQUcsT0FBTztZQUNqQyxPQUFPO1FBQ1Q7UUFJQSxJQUFJSixFQUFFRSxXQUFXLEtBQUtNLFFBQVEsT0FBT1IsRUFBRVMsTUFBTSxLQUFLUixFQUFFUSxNQUFNLElBQUlULEVBQUVVLEtBQUssS0FBS1QsRUFBRVMsS0FBSztRQUNqRixJQUFJVixFQUFFVyxPQUFPLEtBQUtDLE9BQU9DLFNBQVMsQ0FBQ0YsT0FBTyxFQUFFLE9BQU9YLEVBQUVXLE9BQU8sT0FBT1YsRUFBRVUsT0FBTztRQUM1RSxJQUFJWCxFQUFFYyxRQUFRLEtBQUtGLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxFQUFFLE9BQU9kLEVBQUVjLFFBQVEsT0FBT2IsRUFBRWEsUUFBUTtRQUVoRlQsT0FBT08sT0FBT1AsSUFBSSxDQUFDTDtRQUNuQkcsU0FBU0UsS0FBS0YsTUFBTTtRQUNwQixJQUFJQSxXQUFXUyxPQUFPUCxJQUFJLENBQUNKLEdBQUdFLE1BQU0sRUFBRSxPQUFPO1FBRTdDLElBQUtDLElBQUlELFFBQVFDLFFBQVEsR0FDdkIsSUFBSSxDQUFDUSxPQUFPQyxTQUFTLENBQUNFLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDZixHQUFHSSxJQUFJLENBQUNELEVBQUUsR0FBRyxPQUFPO1FBRWhFLElBQUtBLElBQUlELFFBQVFDLFFBQVEsR0FBSTtZQUMzQixJQUFJYSxNQUFNWixJQUFJLENBQUNELEVBQUU7WUFFakIsSUFBSSxDQUFDTCxNQUFNQyxDQUFDLENBQUNpQixJQUFJLEVBQUVoQixDQUFDLENBQUNnQixJQUFJLEdBQUcsT0FBTztRQUNyQztRQUVBLE9BQU87SUFDVDtJQUVBLG9DQUFvQztJQUNwQyxPQUFPakIsTUFBSUEsS0FBS0MsTUFBSUE7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcz8wYmM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gZG8gbm90IGVkaXQgLmpzIGZpbGVzIGRpcmVjdGx5IC0gZWRpdCBzcmMvaW5kZXguanN0XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICBpZiAoYS5jb25zdHJ1Y3RvciAhPT0gYi5jb25zdHJ1Y3RvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGxlbmd0aCwgaSwga2V5cztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuXG5cbiAgICBpZiAoYS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKSByZXR1cm4gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3M7XG4gICAgaWYgKGEudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKSByZXR1cm4gYS52YWx1ZU9mKCkgPT09IGIudmFsdWVPZigpO1xuICAgIGlmIChhLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHRydWUgaWYgYm90aCBOYU4sIGZhbHNlIG90aGVyd2lzZVxuICByZXR1cm4gYSE9PWEgJiYgYiE9PWI7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlcXVhbCIsImEiLCJiIiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJpIiwia2V5cyIsIkFycmF5IiwiaXNBcnJheSIsIlJlZ0V4cCIsInNvdXJjZSIsImZsYWdzIiwidmFsdWVPZiIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/fast-deep-equal/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/ui/dashboard/map/MapComponent.jsx":
/*!***************************************************!*\
  !*** ./src/app/ui/dashboard/map/MapComponent.jsx ***!
  \***************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _vis_gl_react_google_maps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vis.gl/react-google-maps */ \"(app-pages-browser)/./node_modules/@vis.gl/react-google-maps/dist/index.modern.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst App = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_vis_gl_react_google_maps__WEBPACK_IMPORTED_MODULE_1__.APIProvider, {\n        apiKey: process.env.GOOGLE_MAPS_API_KEY,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_vis_gl_react_google_maps__WEBPACK_IMPORTED_MODULE_1__.Map, {\n            zoom: 10,\n            center: {\n                lat: 53.54992,\n                lng: 10.00678\n            }\n        }, void 0, false, {\n            fileName: \"/Users/dev-francm/Documents/tfg-riego-inteligente/frontend/src/app/ui/dashboard/map/MapComponent.jsx\",\n            lineNumber: 5,\n            columnNumber: 5\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/dev-francm/Documents/tfg-riego-inteligente/frontend/src/app/ui/dashboard/map/MapComponent.jsx\",\n        lineNumber: 4,\n        columnNumber: 3\n    }, undefined);\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvdWkvZGFzaGJvYXJkL21hcC9NYXBDb21wb25lbnQuanN4IiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBRTNELE1BQU1FLE1BQU0sa0JBQ1YsOERBQUNGLGtFQUFXQTtRQUFDRyxRQUFRQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLG1CQUFtQjtrQkFDbEQsNEVBQUNMLDBEQUFHQTtZQUFDTSxNQUFNO1lBQUlDLFFBQVE7Z0JBQUNDLEtBQUs7Z0JBQVVDLEtBQUs7WUFBUTs7Ozs7Ozs7Ozs7S0FGbERSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvdWkvZGFzaGJvYXJkL21hcC9NYXBDb21wb25lbnQuanN4P2YwMzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBUElQcm92aWRlciwgTWFwfSBmcm9tICdAdmlzLmdsL3JlYWN0LWdvb2dsZS1tYXBzJztcblxuY29uc3QgQXBwID0gKCkgPT4gKFxuICA8QVBJUHJvdmlkZXIgYXBpS2V5PXtwcm9jZXNzLmVudi5HT09HTEVfTUFQU19BUElfS0VZfT5cbiAgICA8TWFwIHpvb209ezEwfSBjZW50ZXI9e3tsYXQ6IDUzLjU0OTkyLCBsbmc6IDEwLjAwNjc4fX0gLz5cbiAgPC9BUElQcm92aWRlcj5cbik7Il0sIm5hbWVzIjpbIkFQSVByb3ZpZGVyIiwiTWFwIiwiQXBwIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkdPT0dMRV9NQVBTX0FQSV9LRVkiLCJ6b29tIiwiY2VudGVyIiwibGF0IiwibG5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/ui/dashboard/map/MapComponent.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@vis.gl/react-google-maps/dist/index.modern.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@vis.gl/react-google-maps/dist/index.modern.mjs ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIProvider: function() { return /* binding */ APIProvider; },\n/* harmony export */   APIProviderContext: function() { return /* binding */ APIProviderContext; },\n/* harmony export */   AdvancedMarker: function() { return /* binding */ AdvancedMarker; },\n/* harmony export */   AdvancedMarkerContext: function() { return /* binding */ AdvancedMarkerContext; },\n/* harmony export */   ControlPosition: function() { return /* binding */ ControlPosition; },\n/* harmony export */   GoogleMapsContext: function() { return /* binding */ GoogleMapsContext; },\n/* harmony export */   InfoWindow: function() { return /* binding */ InfoWindow; },\n/* harmony export */   Map: function() { return /* binding */ Map; },\n/* harmony export */   MapControl: function() { return /* binding */ MapControl; },\n/* harmony export */   Marker: function() { return /* binding */ Marker; },\n/* harmony export */   Pin: function() { return /* binding */ Pin; },\n/* harmony export */   isLatLngLiteral: function() { return /* binding */ isLatLngLiteral; },\n/* harmony export */   latLngEquals: function() { return /* binding */ latLngEquals; },\n/* harmony export */   limitTiltRange: function() { return /* binding */ limitTiltRange; },\n/* harmony export */   toLatLngLiteral: function() { return /* binding */ toLatLngLiteral; },\n/* harmony export */   useAdvancedMarkerRef: function() { return /* binding */ useAdvancedMarkerRef; },\n/* harmony export */   useApiIsLoaded: function() { return /* binding */ useApiIsLoaded; },\n/* harmony export */   useApiLoadingStatus: function() { return /* binding */ useApiLoadingStatus; },\n/* harmony export */   useDirectionsService: function() { return /* binding */ useDirectionsService; },\n/* harmony export */   useMap: function() { return /* binding */ useMap; },\n/* harmony export */   useMapsLibrary: function() { return /* binding */ useMapsLibrary; },\n/* harmony export */   useMarkerRef: function() { return /* binding */ useMarkerRef; },\n/* harmony export */   useStreetViewPanorama: function() { return /* binding */ useStreetViewPanorama; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-deep-equal */ \"(app-pages-browser)/./node_modules/fast-deep-equal/index.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$();\n\n\n\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nconst APILoadingStatus = {\n    NOT_LOADED: \"NOT_LOADED\",\n    LOADING: \"LOADING\",\n    LOADED: \"LOADED\",\n    FAILED: \"FAILED\",\n    AUTH_FAILURE: \"AUTH_FAILURE\"\n};\nconst MAPS_API_BASE_URL = \"https://maps.googleapis.com/maps/api/js\";\n/**\n * A GoogleMapsApiLoader to reliably load and unload the Google Maps JavaScript API.\n *\n * The actual loading and unloading is delayed into the microtask queue, to\n * allow using the API in an useEffect hook, without worrying about multiple API loads.\n */ class GoogleMapsApiLoader {\n    /**\n   * Loads the Google Maps API with the specified parameters.\n   * Since the Maps library can only be loaded once per page, this will\n   * produce a warning when called multiple times with different\n   * parameters.\n   *\n   * The returned promise resolves when loading completes\n   * and rejects in case of an error or when the loading was aborted.\n   */ static async load(params, onLoadingStatusChange) {\n        var _window$google;\n        const libraries = params.libraries ? params.libraries.split(\",\") : [];\n        const serializedParams = this.serializeParams(params);\n        // note: if google.maps.importLibrary was defined externally, the params\n        //   will be ignored. If it was defined by a previous call to this\n        //   method, we will check that the key and other parameters have not been\n        //   changed in between calls.\n        if (!((_window$google = window.google) != null && (_window$google = _window$google.maps) != null && _window$google.importLibrary)) {\n            this.serializedApiParams = serializedParams;\n            this.initImportLibrary(params, onLoadingStatusChange);\n        } else {\n            // if serializedApiParams isn't defined the library was loaded externally\n            // and we can only assume that went alright.\n            if (!this.serializedApiParams) {\n                this.loadingStatus = APILoadingStatus.LOADED;\n            }\n            onLoadingStatusChange(this.loadingStatus);\n        }\n        if (this.serializedApiParams && this.serializedApiParams !== serializedParams) {\n            console.warn(\"The maps API has already been loaded with different \" + \"parameters and will not be loaded again. Refresh the page for \" + \"new values to have effect.\");\n        }\n        for (const lib of [\n            \"maps\",\n            ...libraries\n        ]){\n            await google.maps.importLibrary(lib);\n        }\n    }\n    static serializeParams(params) {\n        return [\n            params.v,\n            params.key,\n            params.language,\n            params.region,\n            params.authReferrerPolicy,\n            params.solutionChannel\n        ].join(\"/\");\n    }\n    static initImportLibrary(params, onLoadingStatusChange) {\n        if (!window.google) window.google = {};\n        if (!window.google.maps) window.google.maps = {};\n        if (window.google.maps[\"importLibrary\"]) {\n            console.warn(\"initImportLibrary can only be called once.\", params);\n            return;\n        }\n        let apiPromise = null;\n        const loadApi = (library)=>{\n            if (apiPromise) return apiPromise;\n            apiPromise = new Promise((resolve, reject)=>{\n                var _document$querySelect;\n                const scriptElement = document.createElement(\"script\");\n                const urlParams = new URLSearchParams();\n                for (const [key, value] of Object.entries(params)){\n                    const urlParamName = key.replace(/[A-Z]/g, (t)=>\"_\" + t[0].toLowerCase());\n                    urlParams.set(urlParamName, value);\n                }\n                urlParams.set(\"libraries\", library);\n                urlParams.set(\"loading\", \"async\");\n                urlParams.set(\"callback\", \"__googleMapsCallback__\");\n                scriptElement.async = true;\n                scriptElement.src = MAPS_API_BASE_URL + \"?\" + urlParams.toString();\n                window.__googleMapsCallback__ = ()=>{\n                    this.loadingStatus = APILoadingStatus.LOADED;\n                    onLoadingStatusChange(this.loadingStatus);\n                    resolve();\n                };\n                window.gm_authFailure = ()=>{\n                    this.loadingStatus = APILoadingStatus.AUTH_FAILURE;\n                    onLoadingStatusChange(this.loadingStatus);\n                };\n                scriptElement.onerror = ()=>{\n                    this.loadingStatus = APILoadingStatus.FAILED;\n                    onLoadingStatusChange(this.loadingStatus);\n                    reject(new Error(\"The Google Maps JavaScript API could not load.\"));\n                };\n                scriptElement.nonce = ((_document$querySelect = document.querySelector(\"script[nonce]\")) == null ? void 0 : _document$querySelect.nonce) || \"\";\n                this.loadingStatus = APILoadingStatus.LOADING;\n                onLoadingStatusChange(this.loadingStatus);\n                document.head.append(scriptElement);\n            });\n            return apiPromise;\n        };\n        // for the first load, we declare an importLibrary function that will\n        // be overwritten once the api is loaded.\n        google.maps.importLibrary = (libraryName)=>loadApi(libraryName).then(()=>google.maps.importLibrary(libraryName));\n    }\n}\nGoogleMapsApiLoader.loadingStatus = APILoadingStatus.NOT_LOADED;\nGoogleMapsApiLoader.serializedApiParams = void 0;\nconst _excluded$3 = [\n    \"onLoad\",\n    \"apiKey\",\n    \"version\",\n    \"libraries\"\n], _excluded2 = [\n    \"children\"\n];\nconst APIProviderContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n/**\n * local hook to set up the map-instance management context.\n */ function useMapInstances() {\n    _s();\n    const [mapInstances, setMapInstances] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const addMapInstance = function(mapInstance) {\n        let id = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"default\";\n        setMapInstances((instances)=>_extends({}, instances, {\n                [id]: mapInstance\n            }));\n    };\n    const removeMapInstance = function() {\n        let id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"default\";\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        setMapInstances((_ref)=>{\n            let remaining = _objectWithoutPropertiesLoose(_ref, [\n                id\n            ].map(_toPropertyKey));\n            return remaining;\n        });\n    };\n    const clearMapInstances = ()=>{\n        setMapInstances({});\n    };\n    return {\n        mapInstances,\n        addMapInstance,\n        removeMapInstance,\n        clearMapInstances\n    };\n}\n_s(useMapInstances, \"hsntVWRr8sQi9gSPNtNDFGcwkPA=\");\n/**\n * local hook to handle the loading of the maps API, returns the current loading status\n * @param props\n */ function useGoogleMapsApiLoader(props) {\n    _s1();\n    const { onLoad, apiKey, version, libraries = [] } = props, otherApiParams = _objectWithoutPropertiesLoose(props, _excluded$3);\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(GoogleMapsApiLoader.loadingStatus);\n    const [loadedLibraries, addLoadedLibrary] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((loadedLibraries, action)=>{\n        return _extends({}, loadedLibraries, {\n            [action.name]: action.value\n        });\n    }, {});\n    const librariesString = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>libraries == null ? void 0 : libraries.join(\",\"), [\n        libraries\n    ]);\n    const serializedParams = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>JSON.stringify(_extends({\n            apiKey,\n            version\n        }, otherApiParams)), [\n        apiKey,\n        version,\n        otherApiParams\n    ]);\n    const importLibrary = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (name)=>{\n        var _google;\n        if (loadedLibraries[name]) {\n            return loadedLibraries[name];\n        }\n        if (!((_google = google) != null && (_google = _google.maps) != null && _google.importLibrary)) {\n            throw new Error(\"[api-provider-internal] importLibrary was called before \" + \"google.maps.importLibrary was defined.\");\n        }\n        const res = await window.google.maps.importLibrary(name);\n        addLoadedLibrary({\n            name,\n            value: res\n        });\n        return res;\n    }, [\n        loadedLibraries\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        (async ()=>{\n            try {\n                const params = _extends({\n                    key: apiKey\n                }, otherApiParams);\n                if (version) params.v = version;\n                if ((librariesString == null ? void 0 : librariesString.length) > 0) params.libraries = librariesString;\n                await GoogleMapsApiLoader.load(params, (status)=>setStatus(status));\n                for (const name of [\n                    \"core\",\n                    \"maps\",\n                    ...libraries\n                ]){\n                    await importLibrary(name);\n                }\n                if (onLoad) {\n                    onLoad();\n                }\n            } catch (error) {\n                console.error(\"<ApiProvider> failed to load Google Maps API\", error);\n            }\n        })();\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        apiKey,\n        librariesString,\n        serializedParams\n    ]);\n    return {\n        status,\n        loadedLibraries,\n        importLibrary\n    };\n}\n_s1(useGoogleMapsApiLoader, \"tAqGGf6QjsgSH4cSRTniCSFuVJo=\");\n/**\n * Component to wrap the Google Maps React components and load the Google Maps JavaScript API\n */ const APIProvider = (props)=>{\n    _s2();\n    const { children } = props, loaderProps = _objectWithoutPropertiesLoose(props, _excluded2);\n    const { mapInstances, addMapInstance, removeMapInstance, clearMapInstances } = useMapInstances();\n    const { status, loadedLibraries, importLibrary } = useGoogleMapsApiLoader(loaderProps);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(APIProviderContext.Provider, {\n        value: {\n            mapInstances,\n            addMapInstance,\n            removeMapInstance,\n            clearMapInstances,\n            status,\n            loadedLibraries,\n            importLibrary\n        }\n    }, children);\n};\n_s2(APIProvider, \"DbcSElydWmQ6t+8RZeznJnaF8Pc=\", false, function() {\n    return [\n        useMapInstances,\n        useGoogleMapsApiLoader\n    ];\n});\n_c = APIProvider;\n/**\n * Sets up effects to bind event-handlers for all event-props in MapEventProps.\n * @internal\n */ function useMapEvents(map, props) {\n    // note: calling a useEffect hook from within a loop is prohibited by the\n    // rules of hooks, but it's ok here since it's unconditional and the number\n    // and order of iterations is always strictly the same.\n    // (see https://legacy.reactjs.org/docs/hooks-rules.html)\n    for (const propName of eventPropNames){\n        // fixme: this cast is essentially a 'trust me, bro' for typescript, but\n        //   a proper solution seems way too complicated right now\n        const handler = props[propName];\n        const eventType = propNameToEventType[propName];\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            if (!map) return;\n            if (!handler) return;\n            const listener = google.maps.event.addListener(map, eventType, (ev)=>{\n                handler(createMapEvent(eventType, map, ev));\n            });\n            return ()=>listener.remove();\n        }, [\n            map,\n            eventType,\n            handler\n        ]);\n    }\n}\n/**\n * Create the wrapped map-events used for the event-props.\n * @param type the event type as it is specified to the maps api\n * @param map the map instance the event originates from\n * @param srcEvent the source-event if there is one.\n */ function createMapEvent(type, map, srcEvent) {\n    const ev = {\n        type,\n        map,\n        detail: {},\n        stoppable: false,\n        stop: ()=>{}\n    };\n    if (cameraEventTypes.includes(type)) {\n        const camEvent = ev;\n        const center = map.getCenter();\n        const zoom = map.getZoom();\n        const heading = map.getHeading() || 0;\n        const tilt = map.getTilt() || 0;\n        const bounds = map.getBounds();\n        if (!center || !bounds || !Number.isFinite(zoom)) {\n            console.warn(\"[createEvent] at least one of the values from the map \" + \"returned undefined. This is not expected to happen. Please \" + \"report an issue at https://github.com/visgl/react-google-maps/issues/new\");\n        }\n        camEvent.detail = {\n            center: (center == null ? void 0 : center.toJSON()) || {\n                lat: 0,\n                lng: 0\n            },\n            zoom: zoom || 0,\n            heading: heading,\n            tilt: tilt,\n            bounds: (bounds == null ? void 0 : bounds.toJSON()) || {\n                north: 90,\n                east: 180,\n                south: -90,\n                west: -180\n            }\n        };\n        return camEvent;\n    } else if (mouseEventTypes.includes(type)) {\n        var _srcEvent$latLng;\n        if (!srcEvent) throw new Error(\"[createEvent] mouse events must provide a srcEvent\");\n        const mouseEvent = ev;\n        mouseEvent.domEvent = srcEvent.domEvent;\n        mouseEvent.stoppable = true;\n        mouseEvent.stop = ()=>srcEvent.stop();\n        mouseEvent.detail = {\n            latLng: ((_srcEvent$latLng = srcEvent.latLng) == null ? void 0 : _srcEvent$latLng.toJSON()) || null,\n            placeId: srcEvent.placeId\n        };\n        return mouseEvent;\n    }\n    return ev;\n}\n/**\n * maps the camelCased names of event-props to the corresponding event-types\n * used in the maps API.\n */ const propNameToEventType = {\n    onBoundsChanged: \"bounds_changed\",\n    onCenterChanged: \"center_changed\",\n    onClick: \"click\",\n    onContextmenu: \"contextmenu\",\n    onDblclick: \"dblclick\",\n    onDrag: \"drag\",\n    onDragend: \"dragend\",\n    onDragstart: \"dragstart\",\n    onHeadingChanged: \"heading_changed\",\n    onIdle: \"idle\",\n    onIsFractionalZoomEnabledChanged: \"isfractionalzoomenabled_changed\",\n    onMapCapabilitiesChanged: \"mapcapabilities_changed\",\n    onMapTypeIdChanged: \"maptypeid_changed\",\n    onMousemove: \"mousemove\",\n    onMouseout: \"mouseout\",\n    onMouseover: \"mouseover\",\n    onProjectionChanged: \"projection_changed\",\n    onRenderingTypeChanged: \"renderingtype_changed\",\n    onTilesLoaded: \"tilesloaded\",\n    onTiltChanged: \"tilt_changed\",\n    onZoomChanged: \"zoom_changed\",\n    // note: onCameraChanged is an alias for the bounds_changed event,\n    // since that is going to be fired in every situation where the camera is\n    // updated.\n    onCameraChanged: \"bounds_changed\"\n};\nconst cameraEventTypes = [\n    \"bounds_changed\",\n    \"center_changed\",\n    \"heading_changed\",\n    \"projection_changed\",\n    \"tilt_changed\",\n    \"zoom_changed\"\n];\nconst mouseEventTypes = [\n    \"click\",\n    \"contextmenu\",\n    \"dblclick\",\n    \"mousemove\",\n    \"mouseout\",\n    \"mouseover\"\n];\nconst eventPropNames = Object.keys(propNameToEventType);\nfunction useDeepCompareEffect(effect, deps) {\n    _s3();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);\n    if (!ref.current || !fast_deep_equal__WEBPACK_IMPORTED_MODULE_2__(deps, ref.current)) {\n        ref.current = deps;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect, ref.current);\n}\n_s3(useDeepCompareEffect, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\nconst mapOptionKeys = new Set([\n    \"backgroundColor\",\n    \"clickableIcons\",\n    \"controlSize\",\n    \"disableDefaultUI\",\n    \"disableDoubleClickZoom\",\n    \"draggable\",\n    \"draggableCursor\",\n    \"draggingCursor\",\n    \"fullscreenControl\",\n    \"fullscreenControlOptions\",\n    \"gestureHandling\",\n    \"isFractionalZoomEnabled\",\n    \"keyboardShortcuts\",\n    \"mapTypeControl\",\n    \"mapTypeControlOptions\",\n    \"mapTypeId\",\n    \"maxZoom\",\n    \"minZoom\",\n    \"noClear\",\n    \"panControl\",\n    \"panControlOptions\",\n    \"restriction\",\n    \"rotateControl\",\n    \"rotateControlOptions\",\n    \"scaleControl\",\n    \"scaleControlOptions\",\n    \"scrollwheel\",\n    \"streetView\",\n    \"streetViewControl\",\n    \"streetViewControlOptions\",\n    \"styles\",\n    \"zoomControl\",\n    \"zoomControlOptions\"\n]);\n/**\n * Internal hook to update the map-options when props are changed.\n *\n * @param map the map instance\n * @param mapProps the props to update the map-instance with\n * @internal\n */ function useMapOptions(map, mapProps) {\n    _s4();\n    /* eslint-disable react-hooks/exhaustive-deps --\n   *\n   * The following effects aren't triggered when the map is changed.\n   * In that case, the values will be or have been passed to the map\n   * constructor via mapOptions.\n   */ const mapOptions = {};\n    const keys = Object.keys(mapProps);\n    for (const key of keys){\n        if (!mapOptionKeys.has(key)) continue;\n        mapOptions[key] = mapProps[key];\n    }\n    // update the map options when mapOptions is changed\n    // Note: due to the destructuring above, mapOptions will be seen as changed\n    //   with every re-render, so we're assuming the maps-api will properly\n    //   deal with unchanged option-values passed into setOptions.\n    useDeepCompareEffect(()=>{\n        if (!map) return;\n        map.setOptions(mapOptions);\n    }, [\n        mapOptions\n    ]);\n/* eslint-enable react-hooks/exhaustive-deps */ }\n_s4(useMapOptions, \"9P7jum8Mqo4RIt9ebKErbOvo2AQ=\", false, function() {\n    return [\n        useDeepCompareEffect\n    ];\n});\nfunction useForceUpdate() {\n    _s5();\n    const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)((x)=>x + 1, 0);\n    return forceUpdate;\n}\n_s5(useForceUpdate, \"OYvExaf+rzzVf06crq8byWAi7Rk=\");\nfunction handleBoundsChange(map, ref) {\n    const center = map.getCenter();\n    const zoom = map.getZoom();\n    const heading = map.getHeading() || 0;\n    const tilt = map.getTilt() || 0;\n    const bounds = map.getBounds();\n    if (!center || !bounds || !Number.isFinite(zoom)) {\n        console.warn(\"[useTrackedCameraState] at least one of the values from the map \" + \"returned undefined. This is not expected to happen. Please \" + \"report an issue at https://github.com/visgl/react-google-maps/issues/new\");\n    }\n    // fixme: do we need the `undefined` cases for the camera-params? When are they used in the maps API?\n    Object.assign(ref.current, {\n        center: (center == null ? void 0 : center.toJSON()) || {\n            lat: 0,\n            lng: 0\n        },\n        zoom: zoom || 0,\n        heading: heading,\n        tilt: tilt\n    });\n}\n/**\n * Creates a mutable ref object to track the last known state of the map camera.\n * This is used in `useMapCameraParams` to reduce stuttering in normal operation\n * by avoiding updates of the map camera with values that have already been processed.\n */ function useTrackedCameraStateRef(map) {\n    _s6();\n    const forceUpdate = useForceUpdate();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        center: {\n            lat: 0,\n            lng: 0\n        },\n        heading: 0,\n        tilt: 0,\n        zoom: 0\n    });\n    // Record camera state with every bounds_changed event dispatched by the map.\n    // This data is used to prevent feeding these values back to the\n    // map-instance when a typical \"controlled component\" setup (state variable is\n    // fed into and updated by the map).\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!map) return;\n        const listener = google.maps.event.addListener(map, \"bounds_changed\", ()=>{\n            handleBoundsChange(map, ref);\n            // When an event is occured, we have to update during the next cycle.\n            // The application could decide to ignore the event and not update any\n            // camera props of the map, meaning that in that case we will have to\n            // 'undo' the change to the camera.\n            forceUpdate();\n        });\n        return ()=>listener.remove();\n    }, [\n        map,\n        forceUpdate\n    ]);\n    return ref;\n}\n_s6(useTrackedCameraStateRef, \"ZmjndRMGldGtdD0sNNTfC29J5s8=\", false, function() {\n    return [\n        useForceUpdate\n    ];\n});\nfunction useApiLoadingStatus() {\n    _s7();\n    var _useContext;\n    return ((_useContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(APIProviderContext)) == null ? void 0 : _useContext.status) || APILoadingStatus.NOT_LOADED;\n}\n_s7(useApiLoadingStatus, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n/**\n * Internal hook that updates the camera when deck.gl viewState changes.\n * @internal\n */ function useDeckGLCameraUpdate(map, props) {\n    _s8();\n    const { viewport, viewState } = props;\n    const isDeckGlControlled = !!viewport;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        if (!map || !viewState) return;\n        const { latitude, longitude, bearing: heading, pitch: tilt, zoom } = viewState;\n        map.moveCamera({\n            center: {\n                lat: latitude,\n                lng: longitude\n            },\n            heading,\n            tilt,\n            zoom: zoom + 1\n        });\n    }, [\n        map,\n        viewState\n    ]);\n    return isDeckGlControlled;\n}\n_s8(useDeckGLCameraUpdate, \"n7/vCynhJvM+pLkyL2DMQUF0odM=\");\nfunction isLatLngLiteral(obj) {\n    if (!obj || typeof obj !== \"object\") return false;\n    if (!(\"lat\" in obj && \"lng\" in obj)) return false;\n    return Number.isFinite(obj.lat) && Number.isFinite(obj.lng);\n}\nfunction latLngEquals(a, b) {\n    if (!a || !b) return false;\n    const A = toLatLngLiteral(a);\n    const B = toLatLngLiteral(b);\n    if (A.lat !== B.lat || A.lng !== B.lng) return false;\n    return true;\n}\nfunction toLatLngLiteral(obj) {\n    if (isLatLngLiteral(obj)) return obj;\n    return obj.toJSON();\n}\nfunction useMapCameraParams(map, cameraStateRef, mapProps) {\n    _s9();\n    const center = mapProps.center ? toLatLngLiteral(mapProps.center) : null;\n    let lat = null;\n    let lng = null;\n    if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n        lat = center.lat;\n        lng = center.lng;\n    }\n    const zoom = Number.isFinite(mapProps.zoom) ? mapProps.zoom : null;\n    const heading = Number.isFinite(mapProps.heading) ? mapProps.heading : null;\n    const tilt = Number.isFinite(mapProps.tilt) ? mapProps.tilt : null;\n    // the following effect runs for every render of the map component and checks\n    // if there are differences between the known state of the map instance\n    // (cameraStateRef, which is updated by all bounds_changed events) and the\n    // desired state in the props.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        if (!map) return;\n        const nextCamera = {};\n        let needsUpdate = false;\n        if (lat !== null && lng !== null && (cameraStateRef.current.center.lat !== lat || cameraStateRef.current.center.lng !== lng)) {\n            nextCamera.center = {\n                lat,\n                lng\n            };\n            needsUpdate = true;\n        }\n        if (zoom !== null && cameraStateRef.current.zoom !== zoom) {\n            nextCamera.zoom = zoom;\n            needsUpdate = true;\n        }\n        if (heading !== null && cameraStateRef.current.heading !== heading) {\n            nextCamera.heading = heading;\n            needsUpdate = true;\n        }\n        if (tilt !== null && cameraStateRef.current.tilt !== tilt) {\n            nextCamera.tilt = tilt;\n            needsUpdate = true;\n        }\n        if (needsUpdate) {\n            map.moveCamera(nextCamera);\n        }\n    });\n}\n_s9(useMapCameraParams, \"n7/vCynhJvM+pLkyL2DMQUF0odM=\");\nconst AuthFailureMessage = ()=>{\n    const style = {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        zIndex: 999,\n        display: \"flex\",\n        flexFlow: \"column nowrap\",\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        fontSize: \".8rem\",\n        color: \"rgba(0,0,0,0.6)\",\n        background: \"#dddddd\",\n        padding: \"1rem 1.5rem\"\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: style\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h2\", null, \"Error: AuthFailure\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"A problem with your API key prevents the map from rendering correctly. Please make sure the value of the \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"APIProvider.apiKey\"), \" prop is correct. Check the error-message in the console for further details.\"));\n};\n_c1 = AuthFailureMessage;\nfunction useCallbackRef() {\n    _s10();\n    const [el, setEl] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>setEl(value), [\n        setEl\n    ]);\n    return [\n        el,\n        ref\n    ];\n}\n_s10(useCallbackRef, \"VloTnEpYwfVP5sjWXc1w8xQWZ+Q=\");\n/**\n * Hook to check if the Google Maps API is loaded\n */ function useApiIsLoaded() {\n    _s11();\n    const status = useApiLoadingStatus();\n    return status === APILoadingStatus.LOADED;\n}\n_s11(useApiIsLoaded, \"SdrWm+4Nu53O23DKCYwlLCyijMQ=\", false, function() {\n    return [\n        useApiLoadingStatus\n    ];\n});\nconst _excluded$2 = [\n    \"id\",\n    \"defaultBounds\",\n    \"defaultCenter\",\n    \"defaultZoom\",\n    \"defaultHeading\",\n    \"defaultTilt\"\n];\n/**\n * The main hook takes care of creating map-instances and registering them in\n * the api-provider context.\n * @return a tuple of the map-instance created (or null) and the callback\n *   ref that will be used to pass the map-container into this hook.\n * @internal\n */ function useMapInstance(props, context) {\n    _s12();\n    const apiIsLoaded = useApiIsLoaded();\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [container, containerRef] = useCallbackRef();\n    const { id, defaultBounds, defaultCenter, defaultZoom, defaultHeading, defaultTilt } = props, mapOptions = _objectWithoutPropertiesLoose(props, _excluded$2);\n    // apply default camera props if available and not overwritten by controlled props\n    if (!mapOptions.center && defaultCenter) mapOptions.center = defaultCenter;\n    if (!mapOptions.zoom && Number.isFinite(defaultZoom)) mapOptions.zoom = defaultZoom;\n    if (!mapOptions.heading && Number.isFinite(defaultHeading)) mapOptions.heading = defaultHeading;\n    if (!mapOptions.tilt && Number.isFinite(defaultTilt)) mapOptions.tilt = defaultTilt;\n    // create the map instance and register it in the context\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!container || !apiIsLoaded) return;\n        const { addMapInstance, removeMapInstance } = context;\n        const newMap = new google.maps.Map(container, mapOptions);\n        setMap(newMap);\n        addMapInstance(newMap, id);\n        if (defaultBounds) {\n            newMap.fitBounds(defaultBounds);\n        }\n        // FIXME: When the mapId is changed,  we need to maintain the current camera params.\n        return ()=>{\n            if (!container || !apiIsLoaded) return;\n            // remove all event-listeners to minimize memory-leaks\n            google.maps.event.clearInstanceListeners(newMap);\n            setMap(null);\n            removeMapInstance(id);\n        };\n    }, // some dependencies are ignored in the list below:\n    //  - defaultBounds and the default* camera props will only be used once, and\n    //    changes should be ignored\n    //  - mapOptions has special hooks that take care of updating the options\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        container,\n        apiIsLoaded,\n        id,\n        props.mapId\n    ]);\n    return [\n        map,\n        containerRef\n    ];\n}\n_s12(useMapInstance, \"yj9kZ+vWzlw2L5hG73Qzo1/Ycr0=\", false, function() {\n    return [\n        useApiIsLoaded,\n        useCallbackRef\n    ];\n});\nconst GoogleMapsContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst Map = (props)=>{\n    _s13();\n    const { children, id, className, style } = props;\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(APIProviderContext);\n    const loadingStatus = useApiLoadingStatus();\n    if (!context) {\n        throw new Error(\"<Map> can only be used inside an <ApiProvider> component.\");\n    }\n    const [map, mapRef] = useMapInstance(props, context);\n    const cameraStateRef = useTrackedCameraStateRef(map);\n    useMapCameraParams(map, cameraStateRef, props);\n    useMapEvents(map, props);\n    useMapOptions(map, props);\n    const isDeckGlControlled = useDeckGLCameraUpdate(map, props);\n    const isControlledExternally = !!props.controlled;\n    // disable interactions with the map for externally controlled maps\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!map) return;\n        // fixme: this doesn't seem to belong here (and it's mostly there for convenience anyway).\n        //   The reasoning is that a deck.gl canvas will be put on top of the map, rendering\n        //   any default map controls pretty much useless\n        if (isDeckGlControlled) {\n            map.setOptions({\n                disableDefaultUI: true\n            });\n        }\n        // disable all control-inputs when the map is controlled externally\n        if (isDeckGlControlled || isControlledExternally) {\n            map.setOptions({\n                gestureHandling: \"none\",\n                keyboardShortcuts: false\n            });\n        }\n        return ()=>{\n            map.setOptions({\n                gestureHandling: props.gestureHandling,\n                keyboardShortcuts: props.keyboardShortcuts\n            });\n        };\n    }, [\n        map,\n        isDeckGlControlled,\n        isControlledExternally,\n        props.gestureHandling,\n        props.keyboardShortcuts\n    ]);\n    // setup a stable cameraOptions object that can be used as dependency\n    const center = props.center ? toLatLngLiteral(props.center) : null;\n    let lat = null;\n    let lng = null;\n    if (center && Number.isFinite(center.lat) && Number.isFinite(center.lng)) {\n        lat = center.lat;\n        lng = center.lng;\n    }\n    const cameraOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        var _lat, _lng, _props$zoom, _props$heading, _props$tilt;\n        return {\n            center: {\n                lat: (_lat = lat) != null ? _lat : 0,\n                lng: (_lng = lng) != null ? _lng : 0\n            },\n            zoom: (_props$zoom = props.zoom) != null ? _props$zoom : 0,\n            heading: (_props$heading = props.heading) != null ? _props$heading : 0,\n            tilt: (_props$tilt = props.tilt) != null ? _props$tilt : 0\n        };\n    }, [\n        lat,\n        lng,\n        props.zoom,\n        props.heading,\n        props.tilt\n    ]);\n    // externally controlled mode: reject all camera changes that don't correspond to changes in props\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        if (!map || !isControlledExternally) return;\n        map.moveCamera(cameraOptions);\n        const listener = map.addListener(\"bounds_changed\", ()=>{\n            map.moveCamera(cameraOptions);\n        });\n        return ()=>listener.remove();\n    }, [\n        map,\n        isControlledExternally,\n        cameraOptions\n    ]);\n    const combinedStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>_extends({\n            width: \"100%\",\n            height: \"100%\",\n            // when using deckgl, the map should be sent to the back\n            zIndex: isDeckGlControlled ? -1 : 0\n        }, style), [\n        style,\n        isDeckGlControlled\n    ]);\n    if (loadingStatus === APILoadingStatus.AUTH_FAILURE) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: _extends({\n                position: \"relative\"\n            }, className ? {} : combinedStyle),\n            className: className\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AuthFailureMessage, null));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _extends({\n        ref: mapRef,\n        \"data-testid\": \"map\",\n        style: className ? undefined : combinedStyle,\n        className: className\n    }, id ? {\n        id\n    } : {}), map ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GoogleMapsContext.Provider, {\n        value: {\n            map\n        }\n    }, children) : null);\n};\n_s13(Map, \"ZrK+g6VmCZU9bacdT0VUYJspqbk=\", false, function() {\n    return [\n        useApiLoadingStatus,\n        useMapInstance,\n        useTrackedCameraStateRef,\n        useMapCameraParams,\n        useMapEvents,\n        useMapOptions,\n        useDeckGLCameraUpdate\n    ];\n});\n_c2 = Map;\nMap.deckGLViewProps = true;\nfunction useMapsLibrary(name) {\n    _s14();\n    const apiIsLoaded = useApiIsLoaded();\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(APIProviderContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!apiIsLoaded || !ctx) return;\n        // Trigger loading the libraries via our proxy-method.\n        // The returned promise is ignored, since importLibrary will update loadedLibraries\n        // list in the context, triggering a re-render.\n        void ctx.importLibrary(name);\n    }, [\n        apiIsLoaded,\n        ctx,\n        name\n    ]);\n    return (ctx == null ? void 0 : ctx.loadedLibraries[name]) || null;\n}\n_s14(useMapsLibrary, \"E3X53atPXTwKH7JamUeR87Uqn9c=\", false, function() {\n    return [\n        useApiIsLoaded\n    ];\n});\n/* eslint-disable complexity */ const AdvancedMarkerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nfunction useAdvancedMarker(props) {\n    _s15();\n    var _useContext;\n    const [marker, setMarker] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contentContainer, setContentContainer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const map = (_useContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GoogleMapsContext)) == null ? void 0 : _useContext.map;\n    const markerLibrary = useMapsLibrary(\"marker\");\n    const { children, className, onClick, onDrag, onDragStart, onDragEnd, collisionBehavior, draggable, position, title, zIndex } = props;\n    const numChilds = react__WEBPACK_IMPORTED_MODULE_0__.Children.count(children);\n    // create marker instance and add it to the map when map becomes available\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!map || !markerLibrary) return;\n        const newMarker = new markerLibrary.AdvancedMarkerElement();\n        newMarker.map = map;\n        setMarker(newMarker);\n        // create container for marker content if there are children\n        if (numChilds > 0) {\n            const el = document.createElement(\"div\");\n            if (className) el.className = className;\n            newMarker.content = el;\n            setContentContainer(el);\n        }\n        return ()=>{\n            newMarker.map = null;\n            setMarker(null);\n            setContentContainer(null);\n        };\n    // We do not want to re-render the whole marker when the className changes\n    // because that causes a short flickering of the marker.\n    // The className update is handled in the useEffect below.\n    // Excluding the className from the dependency array onm purpose here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        map,\n        markerLibrary,\n        numChilds\n    ]);\n    // update className of advanced marker element\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!contentContainer) return;\n        contentContainer.className = className != null ? className : \"\";\n    }, [\n        contentContainer,\n        className\n    ]);\n    // bind all marker events\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!marker) return;\n        const gme = google.maps.event;\n        if (onClick) gme.addListener(marker, \"click\", onClick);\n        if (onDrag) gme.addListener(marker, \"drag\", onDrag);\n        if (onDragStart) gme.addListener(marker, \"dragstart\", onDragStart);\n        if (onDragEnd) gme.addListener(marker, \"dragend\", onDragEnd);\n        if ((onDrag || onDragStart || onDragEnd) && !draggable) {\n            console.warn(\"You need to set the marker to draggable to listen to drag-events.\");\n        }\n        const m = marker;\n        return ()=>{\n            gme.clearInstanceListeners(m);\n        };\n    }, [\n        marker,\n        draggable,\n        onClick,\n        onDragStart,\n        onDrag,\n        onDragEnd\n    ]);\n    // update other marker props when changed\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!marker) return;\n        if (position !== undefined) marker.position = position;\n        if (draggable !== undefined) marker.gmpDraggable = draggable;\n        if (collisionBehavior !== undefined) marker.collisionBehavior = collisionBehavior;\n        if (zIndex !== undefined) marker.zIndex = zIndex;\n        if (typeof title === \"string\") marker.title = title;\n    }, [\n        marker,\n        position,\n        draggable,\n        collisionBehavior,\n        zIndex,\n        title\n    ]);\n    return [\n        marker,\n        contentContainer\n    ];\n}\n_s15(useAdvancedMarker, \"6C7+R3ZhiqIRurq1X/GY9NwsLEc=\", false, function() {\n    return [\n        useMapsLibrary\n    ];\n});\nconst AdvancedMarker = /*#__PURE__*/ _s16((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c3 = _s16((props, ref)=>{\n    _s16();\n    const { children } = props;\n    const [marker, contentContainer] = useAdvancedMarker(props);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, ()=>marker, [\n        marker\n    ]);\n    if (!marker) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AdvancedMarkerContext.Provider, {\n        value: {\n            marker\n        }\n    }, contentContainer !== null && /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children, contentContainer));\n}, \"R8BJBe3cv/IK378lR54wKf/yxFc=\", false, function() {\n    return [\n        useAdvancedMarker\n    ];\n})), \"R8BJBe3cv/IK378lR54wKf/yxFc=\", false, function() {\n    return [\n        useAdvancedMarker\n    ];\n});\n_c4 = AdvancedMarker;\nfunction useAdvancedMarkerRef() {\n    _s17();\n    const [marker, setMarker] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const refCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>{\n        setMarker(m);\n    }, []);\n    return [\n        refCallback,\n        marker\n    ];\n}\n_s17(useAdvancedMarkerRef, \"FBQ4v4HcC4JdZrPyl/BGQ2M+tPY=\");\nconst _excluded$1 = [\n    \"children\",\n    \"anchor\",\n    \"onCloseClick\"\n];\n/**\n * Component to render a Google Maps Info Window\n */ const InfoWindow = (props)=>{\n    _s18();\n    var _useContext;\n    const { children, anchor, onCloseClick } = props, infoWindowOptions = _objectWithoutPropertiesLoose(props, _excluded$1);\n    const map = (_useContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GoogleMapsContext)) == null ? void 0 : _useContext.map;\n    const infoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [contentContainer, setContentContainer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // create infowindow once map is available\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!map) return;\n        const newInfowindow = new google.maps.InfoWindow(infoWindowOptions);\n        // Add content to info window\n        const el = document.createElement(\"div\");\n        newInfowindow.setContent(el);\n        infoWindowRef.current = newInfowindow;\n        setContentContainer(el);\n        // Cleanup info window and event listeners on unmount\n        return ()=>{\n            google.maps.event.clearInstanceListeners(newInfowindow);\n            newInfowindow.close();\n            el.remove();\n            setContentContainer(null);\n        };\n    // We don't want to re-render a whole new infowindow\n    // when the options change to prevent flickering.\n    // Update of infoWindow options is handled in the useEffect below.\n    // Excluding infoWindowOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        map,\n        children\n    ]);\n    // Update infoWindowOptions\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _infoWindowRef$curren;\n        (_infoWindowRef$curren = infoWindowRef.current) == null || _infoWindowRef$curren.setOptions(infoWindowOptions);\n    }, [\n        infoWindowOptions\n    ]);\n    // Handle the close click callback\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!infoWindowRef.current) return;\n        let listener = null;\n        if (onCloseClick) {\n            listener = google.maps.event.addListener(infoWindowRef.current, \"closeclick\", onCloseClick);\n        }\n        return ()=>{\n            if (listener) listener.remove();\n        };\n    }, [\n        onCloseClick\n    ]);\n    // Open info window after content container is set\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // anchor === null means an anchor is defined but not ready yet.\n        if (!contentContainer || !infoWindowRef.current || anchor === null) return;\n        const openOptions = {\n            map\n        };\n        if (anchor) {\n            openOptions.anchor = anchor;\n        }\n        infoWindowRef.current.open(openOptions);\n    }, [\n        contentContainer,\n        infoWindowRef,\n        anchor,\n        map\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, contentContainer !== null && /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children, contentContainer));\n};\n_s18(InfoWindow, \"Itbn5xIDJk95nuGa0zkYYXGlWs0=\");\n_c5 = InfoWindow;\nconst shownMessages = new Set();\nfunction logErrorOnce() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    const key = JSON.stringify(args);\n    if (!shownMessages.has(key)) {\n        shownMessages.add(key);\n        console.error(...args);\n    }\n}\n/**\n * Retrieves a map-instance from the context. This is either an instance\n * identified by id or the parent map instance if no id is specified.\n * Returns null if neither can be found.\n */ const useMap = function() {\n    let id = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n    _s19();\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(APIProviderContext);\n    const { map } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GoogleMapsContext) || {};\n    if (ctx === null) {\n        logErrorOnce(\"useMap(): failed to retrieve APIProviderContext. \" + \"Make sure that the <APIProvider> component exists and that the \" + \"component you are calling `useMap()` from is a sibling of the \" + \"<APIProvider>.\");\n        return null;\n    }\n    const { mapInstances } = ctx;\n    // if an id is specified, the corresponding map or null is returned\n    if (id !== null) return mapInstances[id] || null;\n    // otherwise, return the closest ancestor\n    if (map) return map;\n    // finally, return the default map instance\n    return mapInstances[\"default\"] || null;\n};\n_s19(useMap, \"02oyNIqv7n0uhMRysGwaojH8Xj0=\");\n/**\n * Copy of the `google.maps.ControlPosition` constants.\n * They have to be duplicated here since we can't wait for the maps API to load to be able to use them.\n */ const ControlPosition = {\n    TOP_LEFT: 1,\n    TOP_CENTER: 2,\n    TOP: 2,\n    TOP_RIGHT: 3,\n    LEFT_CENTER: 4,\n    LEFT_TOP: 5,\n    LEFT: 5,\n    LEFT_BOTTOM: 6,\n    RIGHT_TOP: 7,\n    RIGHT: 7,\n    RIGHT_CENTER: 8,\n    RIGHT_BOTTOM: 9,\n    BOTTOM_LEFT: 10,\n    BOTTOM_CENTER: 11,\n    BOTTOM: 11,\n    BOTTOM_RIGHT: 12,\n    CENTER: 13,\n    BLOCK_START_INLINE_START: 14,\n    BLOCK_START_INLINE_CENTER: 15,\n    BLOCK_START_INLINE_END: 16,\n    INLINE_START_BLOCK_CENTER: 17,\n    INLINE_START_BLOCK_START: 18,\n    INLINE_START_BLOCK_END: 19,\n    INLINE_END_BLOCK_START: 20,\n    INLINE_END_BLOCK_CENTER: 21,\n    INLINE_END_BLOCK_END: 22,\n    BLOCK_END_INLINE_START: 23,\n    BLOCK_END_INLINE_CENTER: 24,\n    BLOCK_END_INLINE_END: 25\n};\nconst MapControl = (param)=>{\n    let { children, position } = param;\n    _s20();\n    const controlContainer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>document.createElement(\"div\"), []);\n    const map = useMap();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!map) return;\n        const controls = map.controls[position];\n        controls.push(controlContainer);\n        return ()=>{\n            const index = controls.getArray().indexOf(controlContainer);\n            controls.removeAt(index);\n        };\n    }, [\n        controlContainer,\n        map,\n        position\n    ]);\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children, controlContainer);\n};\n_s20(MapControl, \"GWhrPCjHyQkJZ2cqIea0Zsdo0OI=\", false, function() {\n    return [\n        useMap\n    ];\n});\n_c6 = MapControl;\nconst _excluded = [\n    \"onClick\",\n    \"onDrag\",\n    \"onDragStart\",\n    \"onDragEnd\",\n    \"onMouseOver\",\n    \"onMouseOut\"\n];\nfunction useMarker(props) {\n    _s21();\n    var _useContext;\n    const [marker, setMarker] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const map = (_useContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GoogleMapsContext)) == null ? void 0 : _useContext.map;\n    const { onClick, onDrag, onDragStart, onDragEnd, onMouseOver, onMouseOut } = props, markerOptions = _objectWithoutPropertiesLoose(props, _excluded);\n    const { position, draggable } = markerOptions;\n    // create marker instance and add to the map once the map is available\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!map) {\n            if (map === undefined) console.error(\"<Marker> has to be inside a Map component.\");\n            return;\n        }\n        const newMarker = new google.maps.Marker(markerOptions);\n        newMarker.setMap(map);\n        setMarker(newMarker);\n        return ()=>{\n            newMarker.setMap(null);\n            setMarker(null);\n        };\n    // We do not want to re-render the whole marker when the options change.\n    // Marker options update is handled in a useEffect below.\n    // Excluding markerOptions from dependency array on purpose here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        map\n    ]);\n    // attach and re-attach event-handlers when any of the properties change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!marker) return;\n        const m = marker;\n        // Add event listeners\n        const gme = google.maps.event;\n        if (onClick) gme.addListener(m, \"click\", onClick);\n        if (onDrag) gme.addListener(m, \"drag\", onDrag);\n        if (onDragStart) gme.addListener(m, \"dragstart\", onDragStart);\n        if (onDragEnd) gme.addListener(m, \"dragend\", onDragEnd);\n        if (onMouseOver) gme.addListener(m, \"mouseover\", onMouseOver);\n        if (onMouseOut) gme.addListener(m, \"mouseout\", onMouseOut);\n        marker.setDraggable(Boolean(draggable));\n        return ()=>{\n            gme.clearInstanceListeners(m);\n        };\n    }, [\n        marker,\n        draggable,\n        onClick,\n        onDrag,\n        onDragStart,\n        onDragEnd,\n        onMouseOver,\n        onMouseOut\n    ]);\n    // update markerOptions (note the dependencies aren't properly checked\n    // here, we just assume that setOptions is smart enough to not waste a\n    // lot of time updating values that didn't change)\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!marker) return;\n        if (markerOptions) marker.setOptions(markerOptions);\n    }, [\n        marker,\n        markerOptions\n    ]);\n    // update position when changed\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Should not update position when draggable\n        if (draggable || !position || !marker) return;\n        marker.setPosition(position);\n    }, [\n        draggable,\n        position,\n        marker\n    ]);\n    return marker;\n}\n_s21(useMarker, \"EYRPhFgbuX4PXl9TTxdummpV/TA=\");\n/**\n * Component to render a Google Maps Marker on a map\n */ const Marker = /*#__PURE__*/ _s22((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(_c7 = _s22((props, ref)=>{\n    _s22();\n    const marker = useMarker(props);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, ()=>marker, [\n        marker\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}, \"X8uSd1rl6ws6EwUC+zm+JeM+A3k=\", false, function() {\n    return [\n        useMarker\n    ];\n})), \"X8uSd1rl6ws6EwUC+zm+JeM+A3k=\", false, function() {\n    return [\n        useMarker\n    ];\n});\n_c8 = Marker;\nfunction useMarkerRef() {\n    _s23();\n    const [marker, setMarker] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const refCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>{\n        setMarker(m);\n    }, []);\n    return [\n        refCallback,\n        marker\n    ];\n}\n_s23(useMarkerRef, \"FBQ4v4HcC4JdZrPyl/BGQ2M+tPY=\");\n/**\n * Component to render a google maps marker Pin View\n */ const Pin = (props)=>{\n    _s24();\n    var _useContext;\n    const advancedMarker = (_useContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AdvancedMarkerContext)) == null ? void 0 : _useContext.marker;\n    const glyphContainer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>document.createElement(\"div\"), []);\n    // Create Pin View instance\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!advancedMarker) {\n            if (advancedMarker === undefined) {\n                console.error(\"The <Pin> component can only be used inside <AdvancedMarker>.\");\n            }\n            return;\n        }\n        if (props.glyph && props.children) {\n            logErrorOnce(\"The <Pin> component only uses children to render the glyph if both the glyph property and children are present.\");\n        }\n        if (react__WEBPACK_IMPORTED_MODULE_0__.Children.count(props.children) > 1) {\n            logErrorOnce(\"Passing multiple children to the <Pin> component might lead to unexpected results.\");\n        }\n        const pinViewOptions = _extends({}, props);\n        const pinElement = new google.maps.marker.PinElement(pinViewOptions);\n        // Set glyph to glyph container if children are present (rendered via portal).\n        // If both props.glyph and props.children are present, props.children takes priority.\n        if (props.children) {\n            pinElement.glyph = glyphContainer;\n        }\n        // Set content of Advanced Marker View to the Pin View element\n        advancedMarker.content = pinElement.element;\n    }, [\n        advancedMarker,\n        glyphContainer,\n        props\n    ]);\n    return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(props.children, glyphContainer);\n};\n_s24(Pin, \"USBKEQcWQZODuZ3cwquju/JeJfU=\");\n_c9 = Pin;\n/**\n * A typescript assertion function used in cases where typescript has to be\n * convinced that the object in question can not be null.\n *\n * @param value\n * @param message\n */ function assertNotNull(value) {\n    let message = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"assertion failed\";\n    if (value === null || value === undefined) {\n        throw Error(message);\n    }\n}\nconst useDirectionsRenderer = (mapId, renderOnMap, renderOptions)=>{\n    _s25();\n    const map = useMap(mapId);\n    // create the renderer instance\n    const directionsRenderer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!map || !renderOnMap) return null;\n        const renderer = new google.maps.DirectionsRenderer(renderOptions);\n        renderer.setMap(map);\n        return renderer;\n    }, // note: no dependency on renderOptions since those are handled in the\n    // next effect.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        map,\n        renderOnMap\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!directionsRenderer) return;\n        directionsRenderer.setOptions(renderOptions || {});\n    }, // note: directionsRenderer dependency isn't needed since the\n    // renderOptions will be set on initialization when creating the renderer.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        renderOptions\n    ]);\n    return directionsRenderer;\n};\n_s25(useDirectionsRenderer, \"3wy+fUkykJDr4Y8iWR/dYrQGq1Q=\", false, function() {\n    return [\n        useMap\n    ];\n});\n/**\n * Hook to get Google Maps Places Directions Service instance\n */ const useDirectionsService = function() {\n    let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s26();\n    const { mapId = null, renderOnMap, renderOptions } = props;\n    const isApiLoaded = useApiIsLoaded();\n    // Creates a Directions Service instance\n    const directionsService = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        // Wait for Google Maps API to be loaded\n        if (!isApiLoaded) return null;\n        return new google.maps.DirectionsService();\n    }, [\n        isApiLoaded\n    ]);\n    // create the renderer instance\n    const directionsRenderer = useDirectionsRenderer(mapId, renderOnMap, renderOptions);\n    // Custom Directions route request followed by directions rendering\n    const renderRoute = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (request)=>{\n        // findAndRenderRoute() isn't callable when either directions\n        // service or renderer aren't ready\n        assertNotNull(directionsService);\n        assertNotNull(directionsRenderer);\n        const result = await directionsService.route(request);\n        directionsRenderer.setDirections(result);\n        return result;\n    }, [\n        directionsService,\n        directionsRenderer\n    ]);\n    // Renders directions route of given index\n    const setRenderedRouteIndex = (index)=>{\n        assertNotNull(directionsRenderer);\n        directionsRenderer.setRouteIndex(index);\n    };\n    return {\n        directionsService,\n        directionsRenderer,\n        renderRoute: directionsService && directionsRenderer ? renderRoute : null,\n        setRenderedRouteIndex: directionsService && directionsRenderer ? setRenderedRouteIndex : null\n    };\n};\n_s26(useDirectionsService, \"YJIw7HvloTjyYW2ZfRczPSqrqwo=\", false, function() {\n    return [\n        useApiIsLoaded,\n        useDirectionsRenderer\n    ];\n});\n/* eslint-disable complexity */ /**\n * Hook to get Street View Panorama\n */ const useStreetViewPanorama = function() {\n    let props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s27();\n    const { mapId, divElement, position, pov, zoom } = props;\n    const googleMapsAPIIsLoaded = useApiIsLoaded();\n    const map = useMap(mapId);\n    const [streetViewPanorama, setStreetViewPanorama] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Creates a Street View instance\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!googleMapsAPIIsLoaded) return;\n        let pano = null;\n        if (divElement) {\n            pano = new google.maps.StreetViewPanorama(divElement);\n        } else if (map) {\n            pano = map.getStreetView();\n        }\n        setStreetViewPanorama(pano);\n        if (!pano) return;\n        if (pov) pano.setPov(pov);\n        if (position) pano.setPosition(position);\n        if (zoom || zoom === 0) pano.setZoom(zoom);\n        return ()=>{\n            setStreetViewPanorama(null);\n            if (map) map.setStreetView(null);\n        };\n    }, // fixme: implement extra hook to update FOV when props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        googleMapsAPIIsLoaded,\n        map,\n        divElement\n    ]);\n    return streetViewPanorama;\n};\n_s27(useStreetViewPanorama, \"0IJItcYnpOv9/QM79l5KEmmOans=\", false, function() {\n    return [\n        useApiIsLoaded,\n        useMap\n    ];\n});\nconst mapLinear = (x, a1, a2, b1, b2)=>b1 + (x - a1) * (b2 - b1) / (a2 - a1);\nconst getMapMaxTilt = (zoom)=>{\n    if (zoom <= 10) {\n        return 30;\n    }\n    if (zoom >= 15.5) {\n        return 67.5;\n    }\n    // range [10...14]\n    if (zoom <= 14) {\n        return mapLinear(zoom, 10, 14, 30, 45);\n    }\n    // range [14...15.5]\n    return mapLinear(zoom, 14, 15.5, 45, 67.5);\n};\n/**\n * Function to limit the tilt range of the google maps map when updating the view state\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst limitTiltRange = (param)=>{\n    let { viewState } = param;\n    const pitch = viewState.pitch;\n    const gmZoom = viewState.zoom + 1;\n    const maxTilt = getMapMaxTilt(gmZoom);\n    return _extends({}, viewState, {\n        fovy: 25,\n        pitch: Math.min(maxTilt, pitch)\n    });\n};\n //# sourceMappingURL=index.modern.mjs.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"APIProvider\");\n$RefreshReg$(_c1, \"AuthFailureMessage\");\n$RefreshReg$(_c2, \"Map\");\n$RefreshReg$(_c3, \"AdvancedMarker$forwardRef\");\n$RefreshReg$(_c4, \"AdvancedMarker\");\n$RefreshReg$(_c5, \"InfoWindow\");\n$RefreshReg$(_c6, \"MapControl\");\n$RefreshReg$(_c7, \"Marker$forwardRef\");\n$RefreshReg$(_c8, \"Marker\");\n$RefreshReg$(_c9, \"Pin\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vis.gl/react-google-maps/dist/index.modern.mjs\n"));

/***/ })

});