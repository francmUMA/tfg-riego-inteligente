"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mui-color-input";
exports.ids = ["vendor-chunks/mui-color-input"];
exports.modules = {

/***/ "(ssr)/./node_modules/mui-color-input/dist/mui-color-input.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mui-color-input/dist/mui-color-input.es.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MuiColorInput: () => (/* binding */ xe),\n/* harmony export */   matchIsValidColor: () => (/* binding */ me)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/material/Button */ \"(ssr)/./node_modules/@mui/material/Button/Button.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/styled.js\");\n/* harmony import */ var _mui_material_Popover__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/Popover */ \"(ssr)/./node_modules/@mui/material/Popover/Popover.js\");\n/* harmony import */ var _mui_material_Slider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/Slider */ \"(ssr)/./node_modules/@mui/material/Slider/Slider.js\");\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material/Box */ \"(ssr)/./node_modules/@mui/material/Box/Box.js\");\n/* harmony import */ var _mui_material_TextField__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/TextField */ \"(ssr)/./node_modules/@mui/material/TextField/TextField.js\");\n/* harmony import */ var _mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/material/InputAdornment */ \"(ssr)/./node_modules/@mui/material/InputAdornment/InputAdornment.js\");\n\n\n\n\n\n\n\n\n\nconst Ht = \"linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(135deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(135deg, transparent 75%, #ccc 75%) /*! @noflip */\", $t = \"linear-gradient(to top, #000000, transparent), linear-gradient(to right, #ffffff, transparent) /*! @noflip */\", It = {\n    Button: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_mui_material_Button__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(()=>({\n            backgroundSize: \"8px 8px\",\n            backgroundPosition: \"0 0, 4px 0, 4px -4px, 0px 4px\",\n            transition: \"none\",\n            boxShadow: \"0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)\",\n            border: 0,\n            borderRadius: 4,\n            width: \"24px\",\n            aspectRatio: \"1 / 1\",\n            height: \"24px\",\n            minWidth: 0\n        }))\n}, Pt = (r)=>{\n    const { bgColor: e, className: t, disablePopover: n, isBgColorValid: a, ...s } = r;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(It.Button, {\n        disableTouchRipple: !0,\n        style: {\n            backgroundColor: a ? e : void 0,\n            backgroundImage: a ? void 0 : Ht,\n            cursor: n ? \"default\" : void 0\n        },\n        className: `MuiColorInput-Button ${t || \"\"}`,\n        ...s\n    });\n}, Bt = {\n    Container: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"div\")(()=>({\n            width: 300,\n            padding: 8\n        }))\n}, Ft = ({ children: r, className: e, position: t = \"start\", ...n })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Popover__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        className: `MuiColorInput-Popover ${e || \"\"}`,\n        anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: t === \"start\" ? \"left\" : \"right\"\n        },\n        transformOrigin: {\n            vertical: \"top\",\n            horizontal: t === \"start\" ? \"left\" : \"right\"\n        },\n        ...n,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Bt.Container, {\n            children: r\n        })\n    }), Et = {\n    Slider: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_mui_material_Slider__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        shouldForwardProp: (r)=>r !== \"$rgbaFrom\" && r !== \"$rgbaTo\"\n    })(()=>({\n            height: 8,\n            \"& .MuiSlider-rail\": {\n                opacity: 1,\n                // TODO: find better way for perf\n                background: \"linear-gradient(to right, rgba(var(--rgb-r), var(--rgb-g), var(--rgb-b), 0) 0%, rgba(var(--rgb-r), var(--rgb-g), var(--rgb-b), 1) 100%)\"\n            },\n            \"& .MuiSlider-track\": {\n                color: \"transparent\",\n                border: 0\n            },\n            \"& .MuiSlider-thumb\": {\n                backgroundColor: \"#ffffff\",\n                border: \"3px solid currentColor\"\n            }\n        }))\n}, Nt = (r)=>{\n    const { rgbColor: e, style: t, className: n, ...a } = r, s = {\n        \"--rgb-r\": e.r,\n        \"--rgb-g\": e.g,\n        \"--rgb-b\": e.b,\n        ...t\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Et.Slider, {\n        className: `MuiColorInput-AlphaSlider ${n || \"\"}`,\n        style: s,\n        ...a\n    });\n}, D = {\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\"\n}, Vt = {\n    ArrowUp: {\n        type: \"hsvV\",\n        value: 1\n    },\n    ArrowDown: {\n        type: \"hsvV\",\n        value: -1\n    },\n    ArrowLeft: {\n        type: \"hsvS\",\n        value: -1\n    },\n    ArrowRight: {\n        type: \"hsvS\",\n        value: 1\n    }\n};\nfunction Tt(r) {\n    return r === D.up || r === D.down || r === D.left || r === D.right;\n}\nfunction q(r, e, t) {\n    return Math.max(e, Math.min(r, t));\n}\nfunction nt(r) {\n    return typeof r == \"number\";\n}\nfunction st(r, e, t) {\n    const n = r.toLocaleString(\"en\", {\n        useGrouping: !1,\n        minimumFractionDigits: e,\n        maximumFractionDigits: t\n    });\n    return Number(n);\n}\nfunction Ot(r, e, t) {\n    const n = r.getBoundingClientRect(), a = e - n.left, s = t - n.top;\n    return {\n        x: q(a / n.width, 0, 1),\n        y: q(1 - s / n.height, 0, 1)\n    };\n}\nfunction Lt(r) {\n    const e = react__WEBPACK_IMPORTED_MODULE_1___default().useRef();\n    return e.current = r, react__WEBPACK_IMPORTED_MODULE_1___default().useCallback((...t)=>e.current?.(...t), []);\n}\nconst at = {\n    Space: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"div\")(()=>({\n            width: \"100%\",\n            height: \"180px\",\n            boxSizing: \"border-box\",\n            outline: 0,\n            position: \"relative\",\n            backgroundImage: $t\n        })),\n    Thumb: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"div\")(()=>({\n            position: \"absolute\",\n            border: \"3px solid #ffffff\",\n            borderRadius: \"50%\",\n            width: \"20px\",\n            height: \"20px\",\n            marginLeft: \"-10px /*! @noflip */\",\n            marginBottom: \"-10px /*! @noflip */\",\n            outline: 0,\n            boxSizing: \"border-box\",\n            willChange: \"left, bottom\",\n            transition: \"box-shadow 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n            \"&:hover\": {\n                boxShadow: \"0px 0px 0px 4px rgba(255 255 255 / 0.16)\"\n            },\n            \"&.MuiColorInput-Thumb-active\": {\n                boxShadow: \"0px 0px 0px 8px rgba(255 255 255 / 0.16)\"\n            },\n            \"@media (hover: none)\": {\n                boxShadow: \"none\"\n            }\n        }))\n}, Dt = (r)=>{\n    const { hsv: e, onChange: t, currentHue: n } = r, a = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(!1), s = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(null), [o, i] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(!1), f = Lt((p, k)=>{\n        if (!s.current) return;\n        const { x: R, y: H } = Ot(s.current, p, k);\n        t({\n            s: R,\n            v: H\n        }), s.current && document.activeElement !== s.current && s.current.focus();\n    }), w = react__WEBPACK_IMPORTED_MODULE_1___default().useCallback(()=>{\n        a.current && (a.current = !1, i(!1));\n    }, []), b = react__WEBPACK_IMPORTED_MODULE_1___default().useCallback((p)=>{\n        a.current && f(p.clientX, p.clientY);\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>(document.addEventListener(\"pointermove\", b, !1), document.addEventListener(\"pointerup\", w, !1), ()=>{\n            document.removeEventListener(\"pointermove\", b, !1), document.removeEventListener(\"pointerup\", w, !1);\n        }), [\n        w,\n        b\n    ]);\n    const m = (p)=>{\n        p.preventDefault(), a.current = !0, f(p.clientX, p.clientY), i(!0);\n    }, S = (p)=>{\n        if (Tt(p.key)) {\n            p.preventDefault();\n            const { type: k, value: R } = Vt[p.key], H = p.shiftKey ? 10 : 1, T = k === \"hsvS\" ? e.s : e.v, $ = q(T + R * H * 0.01, 0, 1);\n            i(!0), t({\n                s: k === \"hsvS\" ? $ : e.s,\n                v: k === \"hsvV\" ? $ : e.v\n            });\n        }\n    }, M = e.s * 100, C = e.v * 100;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(at.Space, {\n        onPointerDown: m,\n        ref: s,\n        className: \"MuiColorInput-ColorSpace\",\n        style: {\n            backgroundColor: `hsl(${n} 100% 50%)`,\n            touchAction: \"none\"\n        },\n        role: \"slider\",\n        \"aria-valuetext\": `Saturation ${st(M, 0, 0)}%, Brightness ${st(C, 0, 0)}%`,\n        onKeyDown: S,\n        tabIndex: 0,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(at.Thumb, {\n            \"aria-label\": \"Color space thumb\",\n            className: o ? \"MuiColorInput-Thumb-active\" : \"\",\n            style: {\n                left: `${M}%`,\n                bottom: `${C}%`\n            }\n        })\n    });\n}, jt = {\n    Slider: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_mui_material_Slider__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(()=>({\n            height: 8,\n            \"& .MuiSlider-rail\": {\n                opacity: 1,\n                background: \"linear-gradient(to right, rgb(255, 0, 0) 0%, rgb(255, 255, 0) 17%, rgb(0, 255, 0) 33%, rgb(0, 255, 255) 50%, rgb(0, 0, 255) 67%, rgb(255, 0, 255) 83%, rgb(255, 0, 0) 100%) /*! @noflip */\"\n            },\n            \"& .MuiSlider-track\": {\n                color: \"transparent\",\n                border: 0\n            },\n            \"& .MuiSlider-thumb\": {\n                backgroundColor: \"#ffffff\",\n                border: \"3px solid currentColor\"\n            }\n        }))\n}, Gt = (r)=>{\n    const { className: e, ...t } = r;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(jt.Slider, {\n        className: `MuiColorInput-HueSlider ${e || \"\"}`,\n        ...t\n    });\n};\nfunction qt(r) {\n    return typeof r == \"string\";\n}\nfunction g(r, e) {\n    Wt(r) && (r = \"100%\");\n    const t = Kt(r);\n    return r = e === 360 ? r : Math.min(e, Math.max(0, parseFloat(r))), t && (r = parseInt(String(r * e), 10) / 100), Math.abs(r - e) < 1e-6 ? 1 : (e === 360 ? r = (r < 0 ? r % e + e : r % e) / parseFloat(String(e)) : r = r % e / parseFloat(String(e)), r);\n}\nfunction j(r) {\n    return Math.min(1, Math.max(0, r));\n}\nfunction Wt(r) {\n    return typeof r == \"string\" && r.indexOf(\".\") !== -1 && parseFloat(r) === 1;\n}\nfunction Kt(r) {\n    return typeof r == \"string\" && r.indexOf(\"%\") !== -1;\n}\nfunction gt(r) {\n    return r = parseFloat(r), (isNaN(r) || r < 0 || r > 1) && (r = 1), r;\n}\nfunction G(r) {\n    return Number(r) <= 1 ? `${Number(r) * 100}%` : r;\n}\nfunction I(r) {\n    return r.length === 1 ? \"0\" + r : String(r);\n}\nfunction Ut(r, e, t) {\n    return {\n        r: g(r, 255) * 255,\n        g: g(e, 255) * 255,\n        b: g(t, 255) * 255\n    };\n}\nfunction ot(r, e, t) {\n    r = g(r, 255), e = g(e, 255), t = g(t, 255);\n    const n = Math.max(r, e, t), a = Math.min(r, e, t);\n    let s = 0, o = 0;\n    const i = (n + a) / 2;\n    if (n === a) o = 0, s = 0;\n    else {\n        const f = n - a;\n        switch(o = i > 0.5 ? f / (2 - n - a) : f / (n + a), n){\n            case r:\n                s = (e - t) / f + (e < t ? 6 : 0);\n                break;\n            case e:\n                s = (t - r) / f + 2;\n                break;\n            case t:\n                s = (r - e) / f + 4;\n                break;\n        }\n        s /= 6;\n    }\n    return {\n        h: s,\n        s: o,\n        l: i\n    };\n}\nfunction z(r, e, t) {\n    return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? r + (e - r) * (6 * t) : t < 1 / 2 ? e : t < 2 / 3 ? r + (e - r) * (2 / 3 - t) * 6 : r;\n}\nfunction zt(r, e, t) {\n    let n, a, s;\n    if (r = g(r, 360), e = g(e, 100), t = g(t, 100), e === 0) a = t, s = t, n = t;\n    else {\n        const o = t < 0.5 ? t * (1 + e) : t + e - t * e, i = 2 * t - o;\n        n = z(i, o, r + 1 / 3), a = z(i, o, r), s = z(i, o, r - 1 / 3);\n    }\n    return {\n        r: n * 255,\n        g: a * 255,\n        b: s * 255\n    };\n}\nfunction it(r, e, t) {\n    r = g(r, 255), e = g(e, 255), t = g(t, 255);\n    const n = Math.max(r, e, t), a = Math.min(r, e, t);\n    let s = 0;\n    const o = n, i = n - a, f = n === 0 ? 0 : i / n;\n    if (n === a) s = 0;\n    else {\n        switch(n){\n            case r:\n                s = (e - t) / i + (e < t ? 6 : 0);\n                break;\n            case e:\n                s = (t - r) / i + 2;\n                break;\n            case t:\n                s = (r - e) / i + 4;\n                break;\n        }\n        s /= 6;\n    }\n    return {\n        h: s,\n        s: f,\n        v: o\n    };\n}\nfunction Yt(r, e, t) {\n    r = g(r, 360) * 6, e = g(e, 100), t = g(t, 100);\n    const n = Math.floor(r), a = r - n, s = t * (1 - e), o = t * (1 - a * e), i = t * (1 - (1 - a) * e), f = n % 6, w = [\n        t,\n        o,\n        s,\n        s,\n        i,\n        t\n    ][f], b = [\n        i,\n        t,\n        t,\n        o,\n        s,\n        s\n    ][f], m = [\n        s,\n        s,\n        i,\n        t,\n        t,\n        o\n    ][f];\n    return {\n        r: w * 255,\n        g: b * 255,\n        b: m * 255\n    };\n}\nfunction ht(r, e, t, n) {\n    const a = [\n        I(Math.round(r).toString(16)),\n        I(Math.round(e).toString(16)),\n        I(Math.round(t).toString(16))\n    ];\n    return n && a[0].startsWith(a[0].charAt(1)) && a[1].startsWith(a[1].charAt(1)) && a[2].startsWith(a[2].charAt(1)) ? a[0].charAt(0) + a[1].charAt(0) + a[2].charAt(0) : a.join(\"\");\n}\nfunction Xt(r, e, t, n, a) {\n    const s = [\n        I(Math.round(r).toString(16)),\n        I(Math.round(e).toString(16)),\n        I(Math.round(t).toString(16)),\n        I(Zt(n))\n    ];\n    return a && s[0].startsWith(s[0].charAt(1)) && s[1].startsWith(s[1].charAt(1)) && s[2].startsWith(s[2].charAt(1)) && s[3].startsWith(s[3].charAt(1)) ? s[0].charAt(0) + s[1].charAt(0) + s[2].charAt(0) + s[3].charAt(0) : s.join(\"\");\n}\nfunction Zt(r) {\n    return Math.round(parseFloat(r) * 255).toString(16);\n}\nfunction ut(r) {\n    return x(r) / 255;\n}\nfunction x(r) {\n    return parseInt(r, 16);\n}\nfunction Jt(r) {\n    return {\n        r: r >> 16,\n        g: (r & 65280) >> 8,\n        b: r & 255\n    };\n}\nconst Z = {\n    aliceblue: \"#f0f8ff\",\n    antiquewhite: \"#faebd7\",\n    aqua: \"#00ffff\",\n    aquamarine: \"#7fffd4\",\n    azure: \"#f0ffff\",\n    beige: \"#f5f5dc\",\n    bisque: \"#ffe4c4\",\n    black: \"#000000\",\n    blanchedalmond: \"#ffebcd\",\n    blue: \"#0000ff\",\n    blueviolet: \"#8a2be2\",\n    brown: \"#a52a2a\",\n    burlywood: \"#deb887\",\n    cadetblue: \"#5f9ea0\",\n    chartreuse: \"#7fff00\",\n    chocolate: \"#d2691e\",\n    coral: \"#ff7f50\",\n    cornflowerblue: \"#6495ed\",\n    cornsilk: \"#fff8dc\",\n    crimson: \"#dc143c\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgoldenrod: \"#b8860b\",\n    darkgray: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkgrey: \"#a9a9a9\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkseagreen: \"#8fbc8f\",\n    darkslateblue: \"#483d8b\",\n    darkslategray: \"#2f4f4f\",\n    darkslategrey: \"#2f4f4f\",\n    darkturquoise: \"#00ced1\",\n    darkviolet: \"#9400d3\",\n    deeppink: \"#ff1493\",\n    deepskyblue: \"#00bfff\",\n    dimgray: \"#696969\",\n    dimgrey: \"#696969\",\n    dodgerblue: \"#1e90ff\",\n    firebrick: \"#b22222\",\n    floralwhite: \"#fffaf0\",\n    forestgreen: \"#228b22\",\n    fuchsia: \"#ff00ff\",\n    gainsboro: \"#dcdcdc\",\n    ghostwhite: \"#f8f8ff\",\n    goldenrod: \"#daa520\",\n    gold: \"#ffd700\",\n    gray: \"#808080\",\n    green: \"#008000\",\n    greenyellow: \"#adff2f\",\n    grey: \"#808080\",\n    honeydew: \"#f0fff0\",\n    hotpink: \"#ff69b4\",\n    indianred: \"#cd5c5c\",\n    indigo: \"#4b0082\",\n    ivory: \"#fffff0\",\n    khaki: \"#f0e68c\",\n    lavenderblush: \"#fff0f5\",\n    lavender: \"#e6e6fa\",\n    lawngreen: \"#7cfc00\",\n    lemonchiffon: \"#fffacd\",\n    lightblue: \"#add8e6\",\n    lightcoral: \"#f08080\",\n    lightcyan: \"#e0ffff\",\n    lightgoldenrodyellow: \"#fafad2\",\n    lightgray: \"#d3d3d3\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightpink: \"#ffb6c1\",\n    lightsalmon: \"#ffa07a\",\n    lightseagreen: \"#20b2aa\",\n    lightskyblue: \"#87cefa\",\n    lightslategray: \"#778899\",\n    lightslategrey: \"#778899\",\n    lightsteelblue: \"#b0c4de\",\n    lightyellow: \"#ffffe0\",\n    lime: \"#00ff00\",\n    limegreen: \"#32cd32\",\n    linen: \"#faf0e6\",\n    magenta: \"#ff00ff\",\n    maroon: \"#800000\",\n    mediumaquamarine: \"#66cdaa\",\n    mediumblue: \"#0000cd\",\n    mediumorchid: \"#ba55d3\",\n    mediumpurple: \"#9370db\",\n    mediumseagreen: \"#3cb371\",\n    mediumslateblue: \"#7b68ee\",\n    mediumspringgreen: \"#00fa9a\",\n    mediumturquoise: \"#48d1cc\",\n    mediumvioletred: \"#c71585\",\n    midnightblue: \"#191970\",\n    mintcream: \"#f5fffa\",\n    mistyrose: \"#ffe4e1\",\n    moccasin: \"#ffe4b5\",\n    navajowhite: \"#ffdead\",\n    navy: \"#000080\",\n    oldlace: \"#fdf5e6\",\n    olive: \"#808000\",\n    olivedrab: \"#6b8e23\",\n    orange: \"#ffa500\",\n    orangered: \"#ff4500\",\n    orchid: \"#da70d6\",\n    palegoldenrod: \"#eee8aa\",\n    palegreen: \"#98fb98\",\n    paleturquoise: \"#afeeee\",\n    palevioletred: \"#db7093\",\n    papayawhip: \"#ffefd5\",\n    peachpuff: \"#ffdab9\",\n    peru: \"#cd853f\",\n    pink: \"#ffc0cb\",\n    plum: \"#dda0dd\",\n    powderblue: \"#b0e0e6\",\n    purple: \"#800080\",\n    rebeccapurple: \"#663399\",\n    red: \"#ff0000\",\n    rosybrown: \"#bc8f8f\",\n    royalblue: \"#4169e1\",\n    saddlebrown: \"#8b4513\",\n    salmon: \"#fa8072\",\n    sandybrown: \"#f4a460\",\n    seagreen: \"#2e8b57\",\n    seashell: \"#fff5ee\",\n    sienna: \"#a0522d\",\n    silver: \"#c0c0c0\",\n    skyblue: \"#87ceeb\",\n    slateblue: \"#6a5acd\",\n    slategray: \"#708090\",\n    slategrey: \"#708090\",\n    snow: \"#fffafa\",\n    springgreen: \"#00ff7f\",\n    steelblue: \"#4682b4\",\n    tan: \"#d2b48c\",\n    teal: \"#008080\",\n    thistle: \"#d8bfd8\",\n    tomato: \"#ff6347\",\n    turquoise: \"#40e0d0\",\n    violet: \"#ee82ee\",\n    wheat: \"#f5deb3\",\n    white: \"#ffffff\",\n    whitesmoke: \"#f5f5f5\",\n    yellow: \"#ffff00\",\n    yellowgreen: \"#9acd32\"\n};\nfunction Qt(r) {\n    let e = {\n        r: 0,\n        g: 0,\n        b: 0\n    }, t = 1, n = null, a = null, s = null, o = !1, i = !1;\n    return typeof r == \"string\" && (r = ee(r)), typeof r == \"object\" && (A(r.r) && A(r.g) && A(r.b) ? (e = Ut(r.r, r.g, r.b), o = !0, i = String(r.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\") : A(r.h) && A(r.s) && A(r.v) ? (n = G(r.s), a = G(r.v), e = Yt(r.h, n, a), o = !0, i = \"hsv\") : A(r.h) && A(r.s) && A(r.l) && (n = G(r.s), s = G(r.l), e = zt(r.h, n, s), o = !0, i = \"hsl\"), Object.prototype.hasOwnProperty.call(r, \"a\") && (t = r.a)), t = gt(t), {\n        ok: o,\n        format: r.format || i,\n        r: Math.min(255, Math.max(e.r, 0)),\n        g: Math.min(255, Math.max(e.g, 0)),\n        b: Math.min(255, Math.max(e.b, 0)),\n        a: t\n    };\n}\nconst _t = \"[-\\\\+]?\\\\d+%?\", te = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\", y = \"(?:\" + te + \")|(?:\" + _t + \")\", Y = \"[\\\\s|\\\\(]+(\" + y + \")[,|\\\\s]+(\" + y + \")[,|\\\\s]+(\" + y + \")\\\\s*\\\\)?\", X = // eslint-disable-next-line prettier/prettier\n\"[\\\\s|\\\\(]+(\" + y + \")[,|\\\\s]+(\" + y + \")[,|\\\\s]+(\" + y + \")[,|\\\\s]+(\" + y + \")\\\\s*\\\\)?\", v = {\n    CSS_UNIT: new RegExp(y),\n    rgb: new RegExp(\"rgb\" + Y),\n    rgba: new RegExp(\"rgba\" + X),\n    hsl: new RegExp(\"hsl\" + Y),\n    hsla: new RegExp(\"hsla\" + X),\n    hsv: new RegExp(\"hsv\" + Y),\n    hsva: new RegExp(\"hsva\" + X),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n};\nfunction ee(r) {\n    if (r = r.trim().toLowerCase(), r.length === 0) return !1;\n    let e = !1;\n    if (Z[r]) r = Z[r], e = !0;\n    else if (r === \"transparent\") return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n    };\n    let t = v.rgb.exec(r);\n    return t ? {\n        r: t[1],\n        g: t[2],\n        b: t[3]\n    } : (t = v.rgba.exec(r), t ? {\n        r: t[1],\n        g: t[2],\n        b: t[3],\n        a: t[4]\n    } : (t = v.hsl.exec(r), t ? {\n        h: t[1],\n        s: t[2],\n        l: t[3]\n    } : (t = v.hsla.exec(r), t ? {\n        h: t[1],\n        s: t[2],\n        l: t[3],\n        a: t[4]\n    } : (t = v.hsv.exec(r), t ? {\n        h: t[1],\n        s: t[2],\n        v: t[3]\n    } : (t = v.hsva.exec(r), t ? {\n        h: t[1],\n        s: t[2],\n        v: t[3],\n        a: t[4]\n    } : (t = v.hex8.exec(r), t ? {\n        r: x(t[1]),\n        g: x(t[2]),\n        b: x(t[3]),\n        a: ut(t[4]),\n        format: e ? \"name\" : \"hex8\"\n    } : (t = v.hex6.exec(r), t ? {\n        r: x(t[1]),\n        g: x(t[2]),\n        b: x(t[3]),\n        format: e ? \"name\" : \"hex\"\n    } : (t = v.hex4.exec(r), t ? {\n        r: x(t[1] + t[1]),\n        g: x(t[2] + t[2]),\n        b: x(t[3] + t[3]),\n        a: ut(t[4] + t[4]),\n        format: e ? \"name\" : \"hex8\"\n    } : (t = v.hex3.exec(r), t ? {\n        r: x(t[1] + t[1]),\n        g: x(t[2] + t[2]),\n        b: x(t[3] + t[3]),\n        format: e ? \"name\" : \"hex\"\n    } : !1)))))))));\n}\nfunction A(r) {\n    return !!v.CSS_UNIT.exec(String(r));\n}\nclass h {\n    constructor(e = \"\", t = {}){\n        if (e instanceof h) return e;\n        typeof e == \"number\" && (e = Jt(e)), this.originalInput = e;\n        const n = Qt(e);\n        this.originalInput = e, this.r = n.r, this.g = n.g, this.b = n.b, this.a = n.a, this.roundA = Math.round(100 * this.a) / 100, this.format = t.format ?? n.format, this.gradientType = t.gradientType, this.r < 1 && (this.r = Math.round(this.r)), this.g < 1 && (this.g = Math.round(this.g)), this.b < 1 && (this.b = Math.round(this.b)), this.isValid = n.ok;\n    }\n    isDark() {\n        return this.getBrightness() < 128;\n    }\n    isLight() {\n        return !this.isDark();\n    }\n    /**\n   * Returns the perceived brightness of the color, from 0-255.\n   */ getBrightness() {\n        const e = this.toRgb();\n        return (e.r * 299 + e.g * 587 + e.b * 114) / 1e3;\n    }\n    /**\n   * Returns the perceived luminance of a color, from 0-1.\n   */ getLuminance() {\n        const e = this.toRgb();\n        let t, n, a;\n        const s = e.r / 255, o = e.g / 255, i = e.b / 255;\n        return s <= 0.03928 ? t = s / 12.92 : t = Math.pow((s + 0.055) / 1.055, 2.4), o <= 0.03928 ? n = o / 12.92 : n = Math.pow((o + 0.055) / 1.055, 2.4), i <= 0.03928 ? a = i / 12.92 : a = Math.pow((i + 0.055) / 1.055, 2.4), 0.2126 * t + 0.7152 * n + 0.0722 * a;\n    }\n    /**\n   * Returns the alpha value of a color, from 0-1.\n   */ getAlpha() {\n        return this.a;\n    }\n    /**\n   * Sets the alpha value on the current color.\n   *\n   * @param alpha - The new alpha value. The accepted range is 0-1.\n   */ setAlpha(e) {\n        return this.a = gt(e), this.roundA = Math.round(100 * this.a) / 100, this;\n    }\n    /**\n   * Returns whether the color is monochrome.\n   */ isMonochrome() {\n        const { s: e } = this.toHsl();\n        return e === 0;\n    }\n    /**\n   * Returns the object as a HSVA object.\n   */ toHsv() {\n        const e = it(this.r, this.g, this.b);\n        return {\n            h: e.h * 360,\n            s: e.s,\n            v: e.v,\n            a: this.a\n        };\n    }\n    /**\n   * Returns the hsva values interpolated into a string with the following format:\n   * \"hsva(xxx, xxx, xxx, xx)\".\n   */ toHsvString() {\n        const e = it(this.r, this.g, this.b), t = Math.round(e.h * 360), n = Math.round(e.s * 100), a = Math.round(e.v * 100);\n        return this.a === 1 ? `hsv(${t}, ${n}%, ${a}%)` : `hsva(${t}, ${n}%, ${a}%, ${this.roundA})`;\n    }\n    /**\n   * Returns the object as a HSLA object.\n   */ toHsl() {\n        const e = ot(this.r, this.g, this.b);\n        return {\n            h: e.h * 360,\n            s: e.s,\n            l: e.l,\n            a: this.a\n        };\n    }\n    /**\n   * Returns the hsla values interpolated into a string with the following format:\n   * \"hsla(xxx, xxx, xxx, xx)\".\n   */ toHslString() {\n        const e = ot(this.r, this.g, this.b), t = Math.round(e.h * 360), n = Math.round(e.s * 100), a = Math.round(e.l * 100);\n        return this.a === 1 ? `hsl(${t}, ${n}%, ${a}%)` : `hsla(${t}, ${n}%, ${a}%, ${this.roundA})`;\n    }\n    /**\n   * Returns the hex value of the color.\n   * @param allow3Char will shorten hex value to 3 char if possible\n   */ toHex(e = !1) {\n        return ht(this.r, this.g, this.b, e);\n    }\n    /**\n   * Returns the hex value of the color -with a # prefixed.\n   * @param allow3Char will shorten hex value to 3 char if possible\n   */ toHexString(e = !1) {\n        return \"#\" + this.toHex(e);\n    }\n    /**\n   * Returns the hex 8 value of the color.\n   * @param allow4Char will shorten hex value to 4 char if possible\n   */ toHex8(e = !1) {\n        return Xt(this.r, this.g, this.b, this.a, e);\n    }\n    /**\n   * Returns the hex 8 value of the color -with a # prefixed.\n   * @param allow4Char will shorten hex value to 4 char if possible\n   */ toHex8String(e = !1) {\n        return \"#\" + this.toHex8(e);\n    }\n    /**\n   * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n   * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n   */ toHexShortString(e = !1) {\n        return this.a === 1 ? this.toHexString(e) : this.toHex8String(e);\n    }\n    /**\n   * Returns the object as a RGBA object.\n   */ toRgb() {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a\n        };\n    }\n    /**\n   * Returns the RGBA values interpolated into a string with the following format:\n   * \"RGBA(xxx, xxx, xxx, xx)\".\n   */ toRgbString() {\n        const e = Math.round(this.r), t = Math.round(this.g), n = Math.round(this.b);\n        return this.a === 1 ? `rgb(${e}, ${t}, ${n})` : `rgba(${e}, ${t}, ${n}, ${this.roundA})`;\n    }\n    /**\n   * Returns the object as a RGBA object.\n   */ toPercentageRgb() {\n        const e = (t)=>`${Math.round(g(t, 255) * 100)}%`;\n        return {\n            r: e(this.r),\n            g: e(this.g),\n            b: e(this.b),\n            a: this.a\n        };\n    }\n    /**\n   * Returns the RGBA relative values interpolated into a string\n   */ toPercentageRgbString() {\n        const e = (t)=>Math.round(g(t, 255) * 100);\n        return this.a === 1 ? `rgb(${e(this.r)}%, ${e(this.g)}%, ${e(this.b)}%)` : `rgba(${e(this.r)}%, ${e(this.g)}%, ${e(this.b)}%, ${this.roundA})`;\n    }\n    /**\n   * The 'real' name of the color -if there is one.\n   */ toName() {\n        if (this.a === 0) return \"transparent\";\n        if (this.a < 1) return !1;\n        const e = \"#\" + ht(this.r, this.g, this.b, !1);\n        for (const [t, n] of Object.entries(Z))if (e === n) return t;\n        return !1;\n    }\n    toString(e) {\n        const t = !!e;\n        e = e ?? this.format;\n        let n = !1;\n        const a = this.a < 1 && this.a >= 0;\n        return !t && a && (e.startsWith(\"hex\") || e === \"name\") ? e === \"name\" && this.a === 0 ? this.toName() : this.toRgbString() : (e === \"rgb\" && (n = this.toRgbString()), e === \"prgb\" && (n = this.toPercentageRgbString()), (e === \"hex\" || e === \"hex6\") && (n = this.toHexString()), e === \"hex3\" && (n = this.toHexString(!0)), e === \"hex4\" && (n = this.toHex8String(!0)), e === \"hex8\" && (n = this.toHex8String()), e === \"name\" && (n = this.toName()), e === \"hsl\" && (n = this.toHslString()), e === \"hsv\" && (n = this.toHsvString()), n || this.toHexString());\n    }\n    toNumber() {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    }\n    clone() {\n        return new h(this.toString());\n    }\n    /**\n   * Lighten the color a given amount. Providing 100 will always return white.\n   * @param amount - valid between 1-100\n   */ lighten(e = 10) {\n        const t = this.toHsl();\n        return t.l += e / 100, t.l = j(t.l), new h(t);\n    }\n    /**\n   * Brighten the color a given amount, from 0 to 100.\n   * @param amount - valid between 1-100\n   */ brighten(e = 10) {\n        const t = this.toRgb();\n        return t.r = Math.max(0, Math.min(255, t.r - Math.round(255 * -(e / 100)))), t.g = Math.max(0, Math.min(255, t.g - Math.round(255 * -(e / 100)))), t.b = Math.max(0, Math.min(255, t.b - Math.round(255 * -(e / 100)))), new h(t);\n    }\n    /**\n   * Darken the color a given amount, from 0 to 100.\n   * Providing 100 will always return black.\n   * @param amount - valid between 1-100\n   */ darken(e = 10) {\n        const t = this.toHsl();\n        return t.l -= e / 100, t.l = j(t.l), new h(t);\n    }\n    /**\n   * Mix the color with pure white, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return white.\n   * @param amount - valid between 1-100\n   */ tint(e = 10) {\n        return this.mix(\"white\", e);\n    }\n    /**\n   * Mix the color with pure black, from 0 to 100.\n   * Providing 0 will do nothing, providing 100 will always return black.\n   * @param amount - valid between 1-100\n   */ shade(e = 10) {\n        return this.mix(\"black\", e);\n    }\n    /**\n   * Desaturate the color a given amount, from 0 to 100.\n   * Providing 100 will is the same as calling greyscale\n   * @param amount - valid between 1-100\n   */ desaturate(e = 10) {\n        const t = this.toHsl();\n        return t.s -= e / 100, t.s = j(t.s), new h(t);\n    }\n    /**\n   * Saturate the color a given amount, from 0 to 100.\n   * @param amount - valid between 1-100\n   */ saturate(e = 10) {\n        const t = this.toHsl();\n        return t.s += e / 100, t.s = j(t.s), new h(t);\n    }\n    /**\n   * Completely desaturates a color into greyscale.\n   * Same as calling `desaturate(100)`\n   */ greyscale() {\n        return this.desaturate(100);\n    }\n    /**\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n   * Values outside of this range will be wrapped into this range.\n   */ spin(e) {\n        const t = this.toHsl(), n = (t.h + e) % 360;\n        return t.h = n < 0 ? 360 + n : n, new h(t);\n    }\n    /**\n   * Mix the current color a given amount with another color, from 0 to 100.\n   * 0 means no mixing (return current color).\n   */ mix(e, t = 50) {\n        const n = this.toRgb(), a = new h(e).toRgb(), s = t / 100, o = {\n            r: (a.r - n.r) * s + n.r,\n            g: (a.g - n.g) * s + n.g,\n            b: (a.b - n.b) * s + n.b,\n            a: (a.a - n.a) * s + n.a\n        };\n        return new h(o);\n    }\n    analogous(e = 6, t = 30) {\n        const n = this.toHsl(), a = 360 / t, s = [\n            this\n        ];\n        for(n.h = (n.h - (a * e >> 1) + 720) % 360; --e;)n.h = (n.h + a) % 360, s.push(new h(n));\n        return s;\n    }\n    /**\n   * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n   */ complement() {\n        const e = this.toHsl();\n        return e.h = (e.h + 180) % 360, new h(e);\n    }\n    monochromatic(e = 6) {\n        const t = this.toHsv(), { h: n } = t, { s: a } = t;\n        let { v: s } = t;\n        const o = [], i = 1 / e;\n        for(; e--;)o.push(new h({\n            h: n,\n            s: a,\n            v: s\n        })), s = (s + i) % 1;\n        return o;\n    }\n    splitcomplement() {\n        const e = this.toHsl(), { h: t } = e;\n        return [\n            this,\n            new h({\n                h: (t + 72) % 360,\n                s: e.s,\n                l: e.l\n            }),\n            new h({\n                h: (t + 216) % 360,\n                s: e.s,\n                l: e.l\n            })\n        ];\n    }\n    /**\n   * Compute how the color would appear on a background\n   */ onBackground(e) {\n        const t = this.toRgb(), n = new h(e).toRgb(), a = t.a + n.a * (1 - t.a);\n        return new h({\n            r: (t.r * t.a + n.r * n.a * (1 - t.a)) / a,\n            g: (t.g * t.a + n.g * n.a * (1 - t.a)) / a,\n            b: (t.b * t.a + n.b * n.a * (1 - t.a)) / a,\n            a\n        });\n    }\n    /**\n   * Alias for `polyad(3)`\n   */ triad() {\n        return this.polyad(3);\n    }\n    /**\n   * Alias for `polyad(4)`\n   */ tetrad() {\n        return this.polyad(4);\n    }\n    /**\n   * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n   * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n   */ polyad(e) {\n        const t = this.toHsl(), { h: n } = t, a = [\n            this\n        ], s = 360 / e;\n        for(let o = 1; o < e; o++)a.push(new h({\n            h: (n + o * s) % 360,\n            s: t.s,\n            l: t.l\n        }));\n        return a;\n    }\n    /**\n   * compare color vs current color\n   */ equals(e) {\n        return this.toRgbString() === new h(e).toRgbString();\n    }\n}\nfunction F(r, e) {\n    return r.toString(e);\n}\nfunction lt(r, e, t) {\n    return new h(r, t);\n}\nfunction re(r) {\n    return qt(r) ? r : new h(r).toString();\n}\nconst ne = (r)=>{\n    const { currentColor: e, format: t, onChange: n, isAlphaHidden: a } = r, [s, o] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(e.toHsv()), i = (b, m)=>{\n        if (!nt(m)) return;\n        const S = q(360 * m / 100, 0, 359);\n        o((C)=>({\n                ...C,\n                h: S\n            }));\n        const M = new h({\n            ...s,\n            a: e.toHsv().a,\n            h: S\n        });\n        n?.(F(M, t));\n    }, f = (b, m)=>{\n        if (!nt(m)) return;\n        const S = e.clone().setAlpha(m);\n        n?.(F(S, t));\n    }, w = ({ s: b, v: m })=>{\n        const S = new h({\n            h: s.h,\n            a: e.toHsv().a,\n            s: b,\n            v: m\n        });\n        o((M)=>({\n                ...M,\n                s: b,\n                v: m\n            })), n?.(F(S, t));\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        className: \"MuiColorInput-PopoverBody\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Dt, {\n                currentHue: s.h,\n                hsv: s,\n                onChange: w\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                mt: \"10px\",\n                px: \"3px\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Gt, {\n                    min: 0,\n                    max: 100,\n                    step: 1,\n                    onChange: i,\n                    \"aria-label\": \"hue\",\n                    value: s.h * 100 / 360\n                })\n            }),\n            a ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                mt: \"10px\",\n                px: \"3px\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Nt, {\n                    min: 0,\n                    max: 1,\n                    step: 0.01,\n                    \"aria-label\": \"alpha\",\n                    rgbColor: e.toRgb(),\n                    onChange: f,\n                    value: e.getAlpha()\n                })\n            })\n        ]\n    });\n}, se = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef((r, e)=>{\n    const { className: t, ...n } = r;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        className: `MuiColorInput-TextField ${t || \"\"}`,\n        ref: e,\n        ...n\n    });\n}), ae = \"black\", oe = \"rgb\";\nfunction ie(r) {\n    return typeof r == \"object\" && !Array.isArray(r) && r !== null;\n}\nfunction ft(r, e) {\n    typeof e == \"function\" ? e(r) : e && ie(e) && \"current\" in e && (e.current = r);\n}\nfunction me(r) {\n    return new h(r).isValid;\n}\nconst xe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef((r, e)=>{\n    const { value: t, format: n, onChange: a, adornmentPosition: s = \"start\", PopoverProps: o, Adornment: i = Pt, fallbackValue: f, isAlphaHidden: w, disablePopover: b, ...m } = r, { onBlur: S, InputProps: M, ...C } = m, { onClose: p, ...k } = o || {}, R = f || ae, H = C.disabled || M?.disabled || !1, T = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(null), $ = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(null), [J, Q] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(null), P = n || oe, W = lt(t, R, {\n        format: P\n    }), [O, N] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(t), [_, V] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(t), bt = (u)=>{\n        u.preventDefault(), u.stopPropagation(), !H && !b && Q(T.current);\n    }, L = (u)=>{\n        const l = new h(u);\n        a?.(u, {\n            hex: l.isValid ? l.toHexString() : \"\",\n            hsv: l.isValid ? l.toHsvString() : \"\",\n            hsl: l.isValid ? l.toHslString() : \"\",\n            rgb: l.isValid ? l.toRgbString() : \"\",\n            hex8: l.isValid ? l.toHex8String() : \"\"\n        });\n    }, pt = (u)=>{\n        const l = u.target.value;\n        if (N(l), l === \"\") V(\"\"), L(\"\");\n        else {\n            const K = new h(l), B = F(K, P);\n            V(B), L(B);\n        }\n    }, mt = (...u)=>{\n        p?.(...u), Q(null), queueMicrotask(()=>{\n            $.current?.focus();\n        });\n    }, xt = (u)=>{\n        S?.(u);\n        const l = new h(O);\n        if (l.isValid) l.format !== P && N(F(l, P));\n        else {\n            if (O === \"\") return;\n            const K = new h(R), B = F(K, P);\n            N(B), V(B), L(B);\n        }\n    };\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        if (t !== _) {\n            const l = lt(t).originalInput;\n            V(l), N(l);\n        }\n    }, [\n        t,\n        _,\n        R\n    ]);\n    const vt = (u)=>{\n        N(u), V(u), L(u);\n    }, St = (u)=>{\n        T.current = u, e && ft(u, e);\n    }, wt = (u)=>{\n        $.current = u, $ && ft(u, $);\n    }, tt = !!J, et = tt ? \"color-popover\" : void 0, rt = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        position: s,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(i, {\n            disabled: H,\n            \"aria-describedby\": et,\n            disablePopover: b || !1,\n            component: b ? \"span\" : void 0,\n            bgColor: W.toString(),\n            isBgColorValid: !!(O !== \"\" && W.isValid),\n            onClick: b ? void 0 : bt\n        })\n    }), Mt = s === \"start\" ? {\n        startAdornment: rt\n    } : {\n        endAdornment: rt\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(se, {\n                ref: St,\n                spellCheck: \"false\",\n                type: \"text\",\n                autoComplete: \"off\",\n                onChange: pt,\n                value: re(O),\n                onBlur: xt,\n                inputRef: wt,\n                disabled: H,\n                InputProps: {\n                    ...Mt,\n                    ...M\n                },\n                ...C\n            }),\n            b ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ft, {\n                id: et,\n                open: tt,\n                position: s,\n                anchorEl: J,\n                onClose: mt,\n                ...k,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ne, {\n                    onChange: vt,\n                    currentColor: W,\n                    format: P,\n                    isAlphaHidden: w\n                })\n            })\n        ]\n    });\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mui-color-input/dist/mui-color-input.es.js\n");

/***/ })

};
;